"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const path = require(`path`);

const _require = require(`fs`),
      appendFileSync = _require.appendFileSync,
      readFileSync = _require.readFileSync,
      renameSync = _require.renameSync,
      existsSync = _require.existsSync,
      unlinkSync = _require.unlinkSync;

module.exports = class Store {
  constructor(baseDir) {
    this.bufferFilePath = path.join(baseDir, `events.json`);
  }

  appendToBuffer(event) {
    try {
      appendFileSync(this.bufferFilePath, event, `utf8`);
    } catch (e) {//ignore
    }
  }

  startFlushEvents(flushOperation) {
    var _this = this;

    return (0, _asyncToGenerator2.default)(function* () {
      // Unique temporary file name across multiple concurrent Gatsby instances
      const now = `${Date.now()}-${process.pid}`;
      let success = false;
      let contents = ``;

      try {
        if (!existsSync(_this.bufferFilePath)) {
          return;
        }

        const newPath = `${_this.bufferFilePath}-${now}`;
        renameSync(_this.bufferFilePath, newPath);
        contents = readFileSync(newPath, `utf8`);
        unlinkSync(newPath); // There is still a chance process dies while sending data and some events are lost
        // This will be ok for now, however

        success = yield flushOperation(contents);
      } catch (e) {// ignore
        // TODO: Log this event
      } finally {
        // if sending fails, we write the data back to the log
        if (!success) {
          _this.appendToBuffer(contents);
        }
      }
    })();
  }

};