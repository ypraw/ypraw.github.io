'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const chokidar = require('chokidar');
const { remove } = require('fs-extra');
const touch = require('touch');
const glob = require('globby');

// Add babel plugin
exports.onCreateBabelConfig = ({ actions }) => {
	actions.setBabelPlugin({
		name: 'styled-jsx/babel',
		options: { plugins: ['styled-jsx-plugin-postcss'] }
	});
};

// Watch CSS files
exports.onCreateWebpackConfig = ({ stage, actions }, options) => {
	if (stage === `develop`) {
		options = (0, _extends3.default)({
			watchCss: true,
			watch: 'src/**/*.css',
			remove: `node_modules/.cache`,
			touch: `src/**/*.js`
		}, options);
		if (options.watchCss) {
			const watcher = chokidar.watch(options.watch);
			watcher.on(`change`, event => {
				remove(options.remove).then(() => glob(options.touch)).then(files => {
					return _promise2.default.all(files.map(file => {
						return touch(file);
					}));
				}).catch(console.error);
			});
			process.on(`exit`, () => watcher.close());
		}
	}

	return actions;
};