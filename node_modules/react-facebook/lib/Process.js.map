{"version":3,"sources":["../src/Process.jsx"],"names":["Process","api","undefined","fn","handleSuccess","setState","data","error","loading","state","Error","render","children","props","handleReady","handleProcess","Component"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AACA;;IAaqBA,O;;;;;;;;;;;;;wFACJ;AACbC,MAAAA,GAAG,EAAEC;AADQ,K;gGAIC,iBAAOC,EAAP,EAAqBC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqBA,aAArB;AAAqBA,gBAAAA,aAArB,GAA+C,yBAAM,CAAE,CAAvD;AAAA;;AACd,oBAAKC,QAAL,CAAc;AACZC,gBAAAA,IAAI,EAAEJ,SADM;AAEZK,gBAAAA,KAAK,EAAEL,SAFK;AAGZM,gBAAAA,OAAO,EAAE;AAHG,eAAd;;AADc;AAQJP,cAAAA,GARI,GAQI,MAAKQ,KART,CAQJR,GARI;;AAAA,kBASPA,GATO;AAAA;AAAA;AAAA;;AAAA,oBAUJ,IAAIS,KAAJ,CAAU,+CAAV,CAVI;;AAAA;AAAA;AAAA,gDAaOP,EAAE,CAACF,GAAD,CAbT;;AAAA;AAaNK,cAAAA,IAbM;;AAeZ,oBAAKD,QAAL,CACE;AACEC,gBAAAA,IAAI,EAAJA,IADF;AAEEE,gBAAAA,OAAO,EAAE;AAFX,eADF,EAKEJ,aALF;;AAfY,+CAuBLE,IAvBK;;AAAA;AAAA;AAAA;;AAyBZ,oBAAKD,QAAL,CAAc;AACZE,gBAAAA,KAAK,aADO;AAEZC,gBAAAA,OAAO,EAAE;AAFG,eAAd;;AAzBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;8FAkCF,UAACP,GAAD,EAAuB;AACnC,YAAKI,QAAL,CAAc;AACZJ,QAAAA,GAAG,EAAHA;AADY,OAAd;AAGD,K;;;;;;SAEDU,M,GAAA,kBAAS;AAAA,QACCC,QADD,GACc,KAAKC,KADnB,CACCD,QADD;AAAA,sBAIH,KAAKH,KAJF;AAAA,QAGLR,GAHK,eAGLA,GAHK;AAAA,QAGAO,OAHA,eAGAA,OAHA;AAAA,QAGSF,IAHT,eAGSA,IAHT;AAAA,QAGeC,KAHf,eAGeA,KAHf;AAMP,WACE,6BAAC,mBAAD;AAAY,MAAA,OAAO,EAAE,KAAKO;AAA1B,OACGF,QAAQ,CAAC;AACRJ,MAAAA,OAAO,EAAE,CAACP,GAAD,IAAQO,OADT;AAERO,MAAAA,aAAa,EAAE,KAAKA,aAFZ;AAGRT,MAAAA,IAAI,EAAJA,IAHQ;AAIRC,MAAAA,KAAK,EAALA;AAJQ,KAAD,CADX,CADF;AAUD,G;;;EA7DkCS,gB","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport Initialize from './Initialize';\n\nexport type Props = {\n  children: Function,\n};\n\ntype State = {\n  api?: Object,\n  isProcessing?: boolean,\n  error?: Error,\n  data?: any,\n};\n\nexport default class Process extends Component<Props, State> {\n  state: State = {\n    api: undefined,\n  };\n\n  handleProcess = async (fn: Function, handleSuccess: Function = () => {}): Promise<any> => {\n    this.setState({\n      data: undefined,\n      error: undefined,\n      loading: true,\n    });\n\n    try {\n      const { api } = this.state;\n      if (!api) {\n        throw new Error('Facebook is not initialized. Wait for isReady');\n      }\n\n      const data = await fn(api);\n\n      this.setState(\n        {\n          data,\n          loading: false,\n        },\n        handleSuccess,\n      );\n\n      return data;\n    } catch (error) {\n      this.setState({\n        error,\n        loading: false,\n      });\n\n      throw error;\n    }\n  }\n\n  handleReady = (api: Object): void => {\n    this.setState({\n      api,\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const {\n      api, loading, data, error,\n    } = this.state;\n\n    return (\n      <Initialize onReady={this.handleReady}>\n        {children({\n          loading: !api || loading,\n          handleProcess: this.handleProcess,\n          data,\n          error,\n        })}\n      </Initialize>\n    );\n  }\n}\n"],"file":"Process.js"}