{"version":3,"sources":["../src/Process.jsx"],"names":["React","Component","Initialize","Process","api","undefined","fn","handleSuccess","setState","data","error","loading","state","Error","render","children","props","handleReady","handleProcess"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAaA,eAAe,MAAMC,OAAN,SAAsBF,SAAtB,CAA8C;AAAA;AAAA;;AAAA;AAAA;;AAAA,mCAC5C;AACbG,MAAAA,GAAG,EAAEC;AADQ,KAD4C;;AAAA;AAAA;AAAA;AAAA,mCAK3C,WAAOC,EAAP,EAAqBC,aAAuB,GAAG,MAAM,CAAE,CAAvD,EAA0E;AACxF,QAAA,KAAI,CAACC,QAAL,CAAc;AACZC,UAAAA,IAAI,EAAEJ,SADM;AAEZK,UAAAA,KAAK,EAAEL,SAFK;AAGZM,UAAAA,OAAO,EAAE;AAHG,SAAd;;AAMA,YAAI;AACF,gBAAM;AAAEP,YAAAA;AAAF,cAAU,KAAI,CAACQ,KAArB;;AACA,cAAI,CAACR,GAAL,EAAU;AACR,kBAAM,IAAIS,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,gBAAMJ,IAAI,SAASH,EAAE,CAACF,GAAD,CAArB;;AAEA,UAAA,KAAI,CAACI,QAAL,CACE;AACEC,YAAAA,IADF;AAEEE,YAAAA,OAAO,EAAE;AAFX,WADF,EAKEJ,aALF;;AAQA,iBAAOE,IAAP;AACD,SAjBD,CAiBE,OAAOC,KAAP,EAAc;AACd,UAAA,KAAI,CAACF,QAAL,CAAc;AACZE,YAAAA,KADY;AAEZC,YAAAA,OAAO,EAAE;AAFG,WAAd;;AAKA,gBAAMD,KAAN;AACD;AACF,OArC0D;;AAAA;AAAA;AAAA;AAAA;;AAAA,yCAuC5CN,GAAD,IAAuB;AACnC,WAAKI,QAAL,CAAc;AACZJ,QAAAA;AADY,OAAd;AAGD,KA3C0D;AAAA;;AA6C3DU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,UAAM;AACJZ,MAAAA,GADI;AACCO,MAAAA,OADD;AACUF,MAAAA,IADV;AACgBC,MAAAA;AADhB,QAEF,KAAKE,KAFT;AAIA,WACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAE,KAAKK;AAA1B,OACGF,QAAQ,CAAC;AACRJ,MAAAA,OAAO,EAAE,CAACP,GAAD,IAAQO,OADT;AAERO,MAAAA,aAAa,EAAE,KAAKA,aAFZ;AAGRT,MAAAA,IAHQ;AAIRC,MAAAA;AAJQ,KAAD,CADX,CADF;AAUD;;AA7D0D","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport Initialize from './Initialize';\n\nexport type Props = {\n  children: Function,\n};\n\ntype State = {\n  api?: Object,\n  isProcessing?: boolean,\n  error?: Error,\n  data?: any,\n};\n\nexport default class Process extends Component<Props, State> {\n  state: State = {\n    api: undefined,\n  };\n\n  handleProcess = async (fn: Function, handleSuccess: Function = () => {}): Promise<any> => {\n    this.setState({\n      data: undefined,\n      error: undefined,\n      loading: true,\n    });\n\n    try {\n      const { api } = this.state;\n      if (!api) {\n        throw new Error('Facebook is not initialized. Wait for isReady');\n      }\n\n      const data = await fn(api);\n\n      this.setState(\n        {\n          data,\n          loading: false,\n        },\n        handleSuccess,\n      );\n\n      return data;\n    } catch (error) {\n      this.setState({\n        error,\n        loading: false,\n      });\n\n      throw error;\n    }\n  }\n\n  handleReady = (api: Object): void => {\n    this.setState({\n      api,\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    const {\n      api, loading, data, error,\n    } = this.state;\n\n    return (\n      <Initialize onReady={this.handleReady}>\n        {children({\n          loading: !api || loading,\n          handleProcess: this.handleProcess,\n          data,\n          error,\n        })}\n      </Initialize>\n    );\n  }\n}\n"],"file":"Process.js"}