import { deserializeStateString, getSimplePaths } from './graph';
import { Machine } from './Machine';
import { assign } from '.';
import { matchesState } from './utils';
var adjMapCache = /*#__PURE__*/new WeakMap();
var defaultReachesOptions = {
    filter: function () {
        return true;
    }
};
export function reaches(machine, stateValue, options) {
    if (options === void 0) {
        options = defaultReachesOptions;
    }
    console.dir(getSimplePaths(machine), { depth: null });
    if (!adjMapCache.get(machine)) {
        adjMapCache.set(machine, getSimplePaths(machine));
    }
    var adjMap = adjMapCache.get(machine);
    var matchingKeys = Object.keys(adjMap).filter(function (key) {
        var _a = deserializeStateString(key),
            value = _a.value,
            context = _a.context;
        return matchesState(stateValue, value) && (!options.filter || options.filter({ value: value, context: context }));
    });
    console.log(matchingKeys);
    return !!matchingKeys.length;
}
var testMachine = /*#__PURE__*/Machine({
    id: 'light',
    initial: 'green',
    context: { count: 10 },
    states: {
        green: {
            on: {
                TIMER: {
                    target: 'yellow.whatever',
                    actions: /*#__PURE__*/assign({ count: 25 })
                }
            }
        },
        yellow: {
            initial: 'whatever',
            states: {
                whatever: {
                    initial: 'deep',
                    states: {
                        deep: {}
                    }
                },
                yeah: {}
            }
        }
    }
});
var r = /*#__PURE__*/reaches(testMachine, { yellow: 'whatever' }, {
    filter: function (_a) {
        var context = _a.context;
        return context.count > 20;
    }
});
console.log(r);