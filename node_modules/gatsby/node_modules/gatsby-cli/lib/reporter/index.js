"use strict";

const util = require(`util`);

const _require = require(`common-tags`),
      stripIndent = _require.stripIndent;

const chalk = require(`chalk`);

const _require2 = require(`gatsby-telemetry`),
      trackError = _require2.trackError;

const tracer = require(`opentracing`).globalTracer();

const _require3 = require(`./errors`),
      getErrorFormatter = _require3.getErrorFormatter;

const reporterInstance = require(`./reporters`);

const errorFormatter = getErrorFormatter();

/**
 * Reporter module.
 * @module reporter
 */
const reporter = {
  /**
   * Strip initial indentation template function.
   */
  stripIndent,
  format: chalk,

  /**
   * Toggle verbosity.
   * @param {boolean} [isVerbose=true]
   */
  setVerbose: (isVerbose = true) => reporterInstance.setVerbose(isVerbose),

  /**
   * Turn off colors in error output.
   * @param {boolean} [isNoColor=false]
   */
  setNoColor(isNoColor = false) {
    reporterInstance.setColors(isNoColor);

    if (isNoColor) {
      errorFormatter.withoutColors();
    }
  },

  /**
   * Log arguments and exit process with status 1.
   * @param {*} args
   */
  panic(...args) {
    this.error(...args);
    trackError(`GENERAL_PANIC`, {
      error: args
    });
    process.exit(1);
  },

  panicOnBuild(...args) {
    const message = args[0],
          error = args[1];
    this.error(message, error);
    trackError(`BUILD_PANIC`, {
      error: args
    });

    if (process.env.gatsby_executing_command === `build`) {
      process.exit(1);
    }
  },

  error(message, error) {
    if (arguments.length === 1 && typeof message !== `string`) {
      error = message;
      message = error.message;
    }

    reporterInstance.error(message);
    if (error) this.log(errorFormatter.render(error));
  },

  /**
   * Set prefix on uptime.
   * @param {string} prefix - A string to prefix uptime with.
   */
  uptime(prefix) {
    this.verbose(`${prefix}: ${(process.uptime() * 1000).toFixed(3)}ms`);
  },

  success: reporterInstance.success,
  verbose: reporterInstance.verbose,
  info: reporterInstance.info,
  warn: reporterInstance.warn,
  log: reporterInstance.log,

  /**
   * Time an activity.
   * @param {string} name - Name of activity.
   * @param {ActivityArgs} activityArgs - optional object with tracer parentSpan
   * @returns {ActivityTracker} The activity tracker.
   */
  activityTimer(name, activityArgs = {}) {
    const parentSpan = activityArgs.parentSpan;
    const spanArgs = parentSpan ? {
      childOf: parentSpan
    } : {};
    const span = tracer.startSpan(name, spanArgs);
    const activity = reporterInstance.createActivity(name);
    return Object.assign({}, activity, {
      end() {
        span.finish();
        activity.end();
      },

      span
    });
  }

};

console.log = (...args) => reporter.log(util.format(...args));

console.warn = (...args) => reporter.warn(util.format(...args));

console.info = (...args) => reporter.info(util.format(...args));

console.error = (...args) => reporter.error(util.format(...args));

module.exports = reporter;