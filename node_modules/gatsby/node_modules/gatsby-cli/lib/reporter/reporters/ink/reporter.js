"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _ciInfo = require("ci-info");

var _chalk = _interopRequireDefault(require("chalk"));

var _activity = _interopRequireWildcard(require("./components/activity"));

var _messages = require("./components/messages");

const showProgress = process.stdout.isTTY && !_ciInfo.isCI;

const generateActivityFinishedText = (name, activity) => {
  let successText = `${name} - ${(0, _activity.calcElapsedTime)(activity.startTime)} s`;

  if (activity.status) {
    successText += ` â€” ${activity.status}`;
  }

  return successText;
};

class GatsbyReporter extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "verbose", process.env.gatsby_log_level === `verbose`);
    (0, _defineProperty2.default)(this, "state", {
      verbose: false,
      messages: [],
      activities: {}
    });
    (0, _defineProperty2.default)(this, "format", _chalk.default);
    (0, _defineProperty2.default)(this, "createActivity", name => {
      return {
        start: () => {
          this.setState(state => {
            return {
              activities: Object.assign({}, state.activities, {
                [name]: {
                  status: ``,
                  startTime: process.hrtime()
                }
              })
            };
          });
        },
        setStatus: status => {
          this.setState(state => {
            const activity = state.activities[name];
            return {
              activities: Object.assign({}, state.activities, {
                [name]: Object.assign({}, activity, {
                  status: status
                })
              })
            };
          });
        },
        end: () => {
          const activity = this.state.activities[name];
          this.success(generateActivityFinishedText(name, activity));
          this.setState(state => {
            const activities = Object.assign({}, state.activities);
            delete activities[name];
            return {
              activities
            };
          });
        }
      };
    });
    (0, _defineProperty2.default)(this, "log", this._addMessage.bind(this, null));
    (0, _defineProperty2.default)(this, "info", this._addMessage.bind(this, `info`));
    (0, _defineProperty2.default)(this, "success", this._addMessage.bind(this, `success`));
    (0, _defineProperty2.default)(this, "warn", this._addMessage.bind(this, `warn`));
    (0, _defineProperty2.default)(this, "error", this._addMessage.bind(this, `error`));
    (0, _defineProperty2.default)(this, "verbose", str => {
      if (!this.verbose) {
        return;
      }

      this._addMessage(`verbose`, str);
    });
  }

  setColors(useColors = false) {
    this.setState({
      disableColors: !useColors
    });
  }

  setVerbose(isVerbose = true) {
    this.verbose = isVerbose;
  }

  _addMessage(type, str) {
    // threat null/undefind as an empty character, it seems like ink can't handle empty str
    if (!str) {
      str = `\u2800`;
    }

    this.setState(state => {
      return {
        messages: [...state.messages, {
          text: str,
          type
        }]
      };
    });
  }

  render() {
    return _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Box, {
      flexDirection: "column"
    }, _react.default.createElement(_ink.Static, null, this.state.messages.map((msg, index) => _react.default.createElement(_ink.Box, {
      textWrap: "wrap",
      key: index
    }, _react.default.createElement(_messages.Message, {
      type: msg.type,
      hideColors: this.state.disableColors
    }, msg.text)))), showProgress && Object.keys(this.state.activities).map(activityName => _react.default.createElement(_activity.default, (0, _extends2.default)({
      key: activityName,
      name: activityName
    }, this.state.activities[activityName])))));
  }

}

exports.default = GatsbyReporter;