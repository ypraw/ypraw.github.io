{"version":3,"sources":["../../src/utils/test-require-error.js"],"names":["moduleName","err","code","regex","RegExp","replace","firstLine","toString","split","test"],"mappings":";;;;;AAAA;AACA;eACe,CAACA,UAAD,EAAaC,GAAb,KAAqB;AAClC;AACA;AACA,MAAIA,GAAG,CAACC,IAAJ,KAAc,kCAAlB,EAAqD;AACnD,WAAO,IAAP;AACD;;AAED,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CACX,gCAA+BJ,UAAU,CAACK,OAAX,CAC9B,uBAD8B,EAE7B,MAF6B,CAG9B,EAJU,CAAd;AAMA,QAAMC,SAAS,GAAGL,GAAG,CAACM,QAAJ,GAAeC,KAAf,CAAsB,IAAtB,EAA2B,CAA3B,CAAlB;AACA,SAAOL,KAAK,CAACM,IAAN,CAAWH,SAAX,CAAP;AACD,C","sourcesContent":["// This module is also copied into the .cache directory some modules copied there\n// from cache-dir can also use this module.\nexport default (moduleName, err) => {\n  // PnP will return the following code when a require is allowed per the\n  // dependency tree rules but the requested file doesn't exist\n  if (err.code === `QUALIFIED_PATH_RESOLUTION_FAILED`) {\n    return true\n  }\n\n  const regex = new RegExp(\n    `Error: Cannot find module\\\\s.${moduleName.replace(\n      /[-/\\\\^$*+?.()|[\\]{}]/g,\n      `\\\\$&`\n    )}`\n  )\n  const firstLine = err.toString().split(`\\n`)[0]\n  return regex.test(firstLine)\n}\n"],"file":"test-require-error.js"}