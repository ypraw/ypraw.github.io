{"version":3,"sources":["../../src/utils/get-static-dir.js"],"names":["fs","require","chokidar","nodePath","store","exports","copyStaticDirs","getState","themes","map","theme","resolve","themeDir","filter","themeStaticPath","existsSync","folder","copySync","join","process","cwd","staticDir","Promise","syncStaticDir","watch","on","path","relativePath","relative","copy"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAE,UAAF,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAE,MAAF,CAAxB;;iBACkBA,OAAO,CAAE,UAAF,C;MAAjBG,K,YAAAA,K;AAER;;;;;;;AAKAC,OAAO,CAACC,cAAR,GAAyB,MAAM;AAC7B;AAD6B,0BAEVF,KAAK,CAACG,QAAN,EAFU;AAAA,QAErBC,MAFqB,mBAErBA,MAFqB,EAEO;;;AAEpC,MAAIA,MAAM,IAAIA,MAAM,CAACA,MAArB,EAA6B;AAC3BA,IAAAA,MAAM,CAACA,MAAP,CACE;AADF,KAEGC,GAFH,CAEOC,KAAK,IAAIP,QAAQ,CAACQ,OAAT,CAAiBD,KAAK,CAACE,QAAvB,EAAkC,QAAlC,CAFhB,EAGE;AAHF,KAIGC,MAJH,CAIUC,eAAe,IAAId,EAAE,CAACe,UAAH,CAAcD,eAAd,CAJ7B,EAKE;AALF,KAMGL,GANH,CAMOO,MAAM,IACThB,EAAE,CAACiB,QAAH,CAAYD,MAAZ,EAAoBb,QAAQ,CAACe,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAApB,CAPJ;AASD;;AAED,QAAMC,SAAS,GAAGlB,QAAQ,CAACe,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAlB;AACA,MAAI,CAACpB,EAAE,CAACe,UAAH,CAAcM,SAAd,CAAL,EAA+B,OAAOC,OAAO,CAACX,OAAR,EAAP;AAC/B,SAAOX,EAAE,CAACiB,QAAH,CAAYI,SAAZ,EAAuBlB,QAAQ,CAACe,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAvB,CAAP;AACD,CAnBD;AAqBA;;;;;;;AAKAf,OAAO,CAACkB,aAAR,GAAwB,MAAM;AAC5B,QAAMF,SAAS,GAAGlB,QAAQ,CAACe,IAAT,CAAcC,OAAO,CAACC,GAAR,EAAd,EAA8B,QAA9B,CAAlB;AACAlB,EAAAA,QAAQ,CACLsB,KADH,CACSH,SADT,EAEGI,EAFH,CAEO,KAFP,EAEaC,IAAI,IAAI;AACjB,UAAMC,YAAY,GAAGxB,QAAQ,CAACyB,QAAT,CAAkBP,SAAlB,EAA6BK,IAA7B,CAArB;AACA1B,IAAAA,EAAE,CAAC6B,IAAH,CAAQH,IAAR,EAAe,GAAEP,OAAO,CAACC,GAAR,EAAc,WAAUO,YAAa,EAAtD;AACD,GALH,EAMGF,EANH,CAMO,QANP,EAMgBC,IAAI,IAAI;AACpB,UAAMC,YAAY,GAAGxB,QAAQ,CAACyB,QAAT,CAAkBP,SAAlB,EAA6BK,IAA7B,CAArB;AACA1B,IAAAA,EAAE,CAAC6B,IAAH,CAAQH,IAAR,EAAe,GAAEP,OAAO,CAACC,GAAR,EAAc,WAAUO,YAAa,EAAtD;AACD,GATH;AAUD,CAZD","sourcesContent":["const fs = require(`fs-extra`)\nconst chokidar = require(`chokidar`)\nconst nodePath = require(`path`)\nconst { store } = require(`../redux`)\n\n/**\n * copyStaticDirs\n * --\n * Copy files from the static directory to the public directory\n */\nexports.copyStaticDirs = () => {\n  // access the store to get themes\n  const { themes } = store.getState() // ensure there are themes\n\n  if (themes && themes.themes) {\n    themes.themes\n      // create an array of potential theme static folders\n      .map(theme => nodePath.resolve(theme.themeDir, `static`))\n      // filter out the static folders that don't exist\n      .filter(themeStaticPath => fs.existsSync(themeStaticPath))\n      // copy the files for each folder into the user's build\n      .map(folder =>\n        fs.copySync(folder, nodePath.join(process.cwd(), `public`))\n      )\n  }\n\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  if (!fs.existsSync(staticDir)) return Promise.resolve()\n  return fs.copySync(staticDir, nodePath.join(process.cwd(), `public`))\n}\n\n/**\n * syncStaticDir\n * --\n * Set up a watcher to sync changes from the static directory to the public directory\n */\nexports.syncStaticDir = () => {\n  const staticDir = nodePath.join(process.cwd(), `static`)\n  chokidar\n    .watch(staticDir)\n    .on(`add`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n    .on(`change`, path => {\n      const relativePath = nodePath.relative(staticDir, path)\n      fs.copy(path, `${process.cwd()}/public/${relativePath}`)\n    })\n}\n"],"file":"get-static-dir.js"}