{"version":3,"sources":["../../../src/utils/worker/physical-cpu-count.js"],"names":["os","require","childProcess","exec","command","output","execSync","encoding","fallbackToNodeJSCheck","cores","cpus","filter","cpu","index","hasHyperthreading","model","includes","isOdd","length","platform","getPhysicalCpuCount","Number","trim","replace","split","map","line","value","isNaN","reduce","sum","number","err","module","exports"],"mappings":";;AAAA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAE,IAAF,CAAlB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAE,eAAF,CAA5B;;AAEA,SAASE,IAAT,CAAcC,OAAd,EAAuB;AACrB,QAAMC,MAAM,GAAGH,YAAY,CAACI,QAAb,CAAsBF,OAAtB,EAA+B;AAAEG,IAAAA,QAAQ,EAAG;AAAb,GAA/B,CAAf;AACA,SAAOF,MAAP;AACD;AAED;;;;;AAGA,SAASG,qBAAT,GAAiC;AAC/B,QAAMC,KAAK,GAAGT,EAAE,CAACU,IAAH,GAAUC,MAAV,CAAiB,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAClD,UAAMC,iBAAiB,GAAGF,GAAG,CAACG,KAAJ,CAAUC,QAAV,CAAoB,OAApB,CAA1B;AACA,UAAMC,KAAK,GAAGJ,KAAK,GAAG,CAAR,KAAc,CAA5B;AACA,WAAO,CAACC,iBAAD,IAAsBG,KAA7B;AACD,GAJa,CAAd;AAMA,SAAOR,KAAK,CAACS,MAAb;AACD;;AAED,MAAMC,QAAQ,GAAGnB,EAAE,CAACmB,QAAH,EAAjB;;AAEA,SAASC,mBAAT,GAA+B;AAC7B,MAAI;AACF,QAAID,QAAQ,KAAM,OAAlB,EAA0B;AACxB,YAAMd,MAAM,GAAGF,IAAI,CAChB,uDADgB,CAAnB;AAGA,aAAOkB,MAAM,CAAChB,MAAM,CAACiB,IAAP,EAAD,CAAb;AACD;;AAED,QAAIH,QAAQ,KAAM,QAAlB,EAA2B;AACzB,YAAMd,MAAM,GAAGF,IAAI,CAAE,8BAAF,CAAnB;AACA,aAAOkB,MAAM,CAAChB,MAAM,CAACiB,IAAP,EAAD,CAAb;AACD;;AAED,QAAIH,QAAQ,KAAM,OAAlB,EAA0B;AACxB,YAAMd,MAAM,GAAGF,IAAI,CAAE,4BAAF,CAAnB;AACA,aAAOE,MAAM,CACVkB,OADI,CACI,KADJ,EACY,EADZ,EAEJC,KAFI,CAEG,IAFH,EAGJC,GAHI,CAGAC,IAAI,IAAIL,MAAM,CAACK,IAAD,CAHd,EAIJf,MAJI,CAIGgB,KAAK,IAAI,CAACC,KAAK,CAACD,KAAD,CAJlB,EAKJE,MALI,CAKG,CAACC,GAAD,EAAMC,MAAN,KAAiBD,GAAG,GAAGC,MAL1B,EAKkC,CALlC,CAAP;AAMD;AACF,GAtBD,CAsBE,OAAOC,GAAP,EAAY,CACZ;AACD;;AAED,SAAOxB,qBAAqB,EAA5B;AACD;;AAEDyB,MAAM,CAACC,OAAP,GAAiBd,mBAAmB,EAApC","sourcesContent":["// Forked from physical-cpu-count package from npm\nconst os = require(`os`)\nconst childProcess = require(`child_process`)\n\nfunction exec(command) {\n  const output = childProcess.execSync(command, { encoding: `utf8` })\n  return output\n}\n\n/*\n * Fallback if child process fails to receive CPU count\n */\nfunction fallbackToNodeJSCheck() {\n  const cores = os.cpus().filter(function(cpu, index) {\n    const hasHyperthreading = cpu.model.includes(`Intel`)\n    const isOdd = index % 2 === 1\n    return !hasHyperthreading || isOdd\n  })\n\n  return cores.length\n}\n\nconst platform = os.platform()\n\nfunction getPhysicalCpuCount() {\n  try {\n    if (platform === `linux`) {\n      const output = exec(\n        `lscpu -p | egrep -v \"^#\" | sort -u -t, -k 2,4 | wc -l`\n      )\n      return Number(output.trim())\n    }\n\n    if (platform === `darwin`) {\n      const output = exec(`sysctl -n hw.physicalcpu_max`)\n      return Number(output.trim())\n    }\n\n    if (platform === `win32`) {\n      const output = exec(`WMIC CPU Get NumberOfCores`)\n      return output\n        .replace(/\\r/g, ``)\n        .split(`\\n`)\n        .map(line => Number(line))\n        .filter(value => !isNaN(value))\n        .reduce((sum, number) => sum + number, 0)\n    }\n  } catch (err) {\n    // carry on\n  }\n\n  return fallbackToNodeJSCheck()\n}\n\nmodule.exports = getPhysicalCpuCount()\n"],"file":"physical-cpu-count.js"}