"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const fs = require(`fs-extra`);

const path = require(`path`);

const Promise = require(`bluebird`);

const _require = require(`lodash`),
      chunk = _require.chunk;

const getFilePath = ({
  publicDir
}, pagePath) => {
  const fixedPagePath = pagePath === `/` ? `index` : pagePath;
  return path.join(publicDir, `page-data`, fixedPagePath, `page-data.json`);
};

const read =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2.default)(function* ({
    publicDir
  }, pagePath) {
    const filePath = getFilePath({
      publicDir
    }, pagePath);
    const rawPageData = yield fs.readFile(filePath, `utf-8`);
    return JSON.parse(rawPageData);
  });

  return function read(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const write =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* ({
    publicDir
  }, page, result, webpackCompilationHash) {
    const filePath = getFilePath({
      publicDir
    }, page.path);
    const body = {
      componentChunkName: page.componentChunkName,
      path: page.path,
      webpackCompilationHash,
      result
    };
    yield fs.outputFile(filePath, JSON.stringify(body));
  });

  return function write(_x3, _x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

const updateCompilationHashes = ({
  publicDir,
  workerPool
}, pagePaths, webpackCompilationHash) => {
  const segments = chunk(pagePaths, 50);
  return Promise.map(segments, segment => workerPool.updateCompilationHashes({
    publicDir
  }, segment, webpackCompilationHash));
};

module.exports = {
  read,
  write,
  updateCompilationHashes
};
//# sourceMappingURL=page-data.js.map