{"version":3,"sources":["../../../src/schema/types/sort.js"],"names":["require","getNamedType","getNullableType","GraphQLInputObjectType","GraphQLList","getSortOrderEnum","schemaComposer","getOrCreateETC","etc","setFields","ASC","value","DESC","getFieldsEnum","typeComposer","inputTypeComposer","typeName","getTypeName","fieldsEnumTypeComposer","fields","convert","getFields","getSortInput","getInputTypeComposer","sortOrderEnumTC","fieldsEnumTC","getOrCreateITC","itc","addFields","order","type","defaultValue","module","exports","MAX_SORT_DEPTH","SORT_FIELD_DELIMITER","prefix","depth","sortFields","Object","keys","forEach","fieldName","fieldConfig","sortKey","sortKeyFieldName","split","join","assign"],"mappings":"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","sourcesContent":["// @flow\n\nconst {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLList,\n} = require(`graphql`)\n\nconst getSortOrderEnum = ({ schemaComposer }) =>\n  schemaComposer.getOrCreateETC(`SortOrderEnum`, etc => {\n    etc.setFields({\n      ASC: { value: `ASC` },\n      DESC: { value: `DESC` },\n    })\n  })\n\nconst getFieldsEnum = ({ schemaComposer, typeComposer, inputTypeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  const fieldsEnumTypeComposer = schemaComposer.getOrCreateETC(\n    `${typeName}FieldsEnum`\n  )\n  const fields = convert(inputTypeComposer.getFields())\n  fieldsEnumTypeComposer.setFields(fields)\n  return fieldsEnumTypeComposer\n}\n\nconst getSortInput = ({ schemaComposer, typeComposer }) => {\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n  const sortOrderEnumTC = getSortOrderEnum({ schemaComposer })\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const typeName = typeComposer.getTypeName()\n\n  return schemaComposer.getOrCreateITC(`${typeName}SortInput`, itc => {\n    itc.addFields({\n      fields: [fieldsEnumTC],\n      order: { type: [sortOrderEnumTC], defaultValue: [`ASC`] },\n    })\n  })\n}\n\nmodule.exports = { getSortInput, getFieldsEnum, getSortOrderEnum }\n\nconst MAX_SORT_DEPTH = 3\nconst SORT_FIELD_DELIMITER = `___`\n\nconst convert = (fields, prefix = null, depth = 0) => {\n  const sortFields = {}\n\n  Object.keys(fields).forEach(fieldName => {\n    const fieldConfig = fields[fieldName]\n    const sortKey = prefix ? `${prefix}.${fieldName}` : fieldName\n    const sortKeyFieldName = sortKey.split(`.`).join(SORT_FIELD_DELIMITER)\n\n    // XXX(freiksenet): this is to preserve legacy behaviour, this probably doesn't actually sort\n    if (getNullableType(fieldConfig.type) instanceof GraphQLList) {\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n      }\n    }\n\n    const type = getNamedType(fieldConfig.type)\n    if (type instanceof GraphQLInputObjectType) {\n      if (depth < MAX_SORT_DEPTH) {\n        Object.assign(sortFields, convert(type.getFields(), sortKey, depth + 1))\n      }\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      sortFields[sortKeyFieldName] = {\n        value: sortKey,\n      }\n    }\n  })\n  return sortFields\n}\n"],"file":"sort.js"}