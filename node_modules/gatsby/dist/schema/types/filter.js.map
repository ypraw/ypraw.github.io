{"version":3,"sources":["../../../src/schema/types/filter.js"],"names":["require","getNamedType","getNullableType","GraphQLInputObjectType","GraphQLEnumType","GraphQLList","isSpecifiedScalarType","InputTypeComposer","GraphQLJSON","GraphQLDate","convert","schemaComposer","inputTypeComposer","filterInputComposer","inputTypeName","getTypeName","replace","convertedITC","has","getITC","name","fields","addAsComposer","fieldNames","getFieldNames","convertedFields","forEach","fieldName","fieldConfig","getFieldConfig","type","itc","operatorsInputTC","isListType","getQueryOperatorListInput","operatorFields","getQueryOperatorInput","addFields","removeEmptyFields","cache","Set","add","getFields","nonEmptyFields","Object","keys","fieldITC","length","setFields","getFilterInput","typeComposer","typeName","getOrCreateITC","getInputTypeComposer","hasField","getFieldType","extendField","filterInputTC","module","exports","EQ","NE","GT","GTE","LT","LTE","IN","NIN","REGEX","GLOB","ALLOWED_OPERATORS","Boolean","Date","Float","ID","Int","JSON","String","Enum","CustomScalar","ARRAY_OPERATORS","getOperatorFields","fieldType","operators","result","op","includes","isBuiltInScalarType","elemMatch"],"mappings":"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","sourcesContent":["const {\n  getNamedType,\n  getNullableType,\n  GraphQLInputObjectType,\n  GraphQLEnumType,\n  GraphQLList,\n  isSpecifiedScalarType,\n} = require(`graphql`)\nconst { InputTypeComposer } = require(`graphql-compose`)\nconst { GraphQLJSON } = require(`graphql-compose`)\nconst { GraphQLDate } = require(`./date`)\n\nconst convert = ({\n  schemaComposer,\n  inputTypeComposer,\n  filterInputComposer,\n}) => {\n  const inputTypeName = inputTypeComposer\n    .getTypeName()\n    .replace(/Input$/, `FilterInput`)\n\n  let convertedITC\n  if (filterInputComposer) {\n    convertedITC = filterInputComposer\n  } else if (schemaComposer.has(inputTypeName)) {\n    return schemaComposer.getITC(inputTypeName)\n  } else {\n    convertedITC = new InputTypeComposer(\n      new GraphQLInputObjectType({\n        name: inputTypeName,\n        fields: {},\n      }),\n      schemaComposer\n    )\n  }\n\n  schemaComposer.addAsComposer(convertedITC)\n\n  const fieldNames = inputTypeComposer.getFieldNames()\n  const convertedFields = {}\n  fieldNames.forEach(fieldName => {\n    const fieldConfig = inputTypeComposer.getFieldConfig(fieldName)\n    const type = getNamedType(fieldConfig.type)\n\n    if (type instanceof GraphQLInputObjectType) {\n      const itc = new InputTypeComposer(type, schemaComposer)\n\n      const operatorsInputTC = convert({\n        schemaComposer,\n        inputTypeComposer: itc,\n      })\n\n      // TODO: array of arrays?\n      const isListType =\n        getNullableType(fieldConfig.type) instanceof GraphQLList\n\n      // elemMatch operator\n      convertedFields[fieldName] = isListType\n        ? getQueryOperatorListInput({\n            schemaComposer,\n            inputTypeComposer: operatorsInputTC,\n          })\n        : operatorsInputTC\n    } else {\n      // GraphQLScalarType || GraphQLEnumType\n      const operatorFields = getQueryOperatorInput({ schemaComposer, type })\n      if (operatorFields) {\n        convertedFields[fieldName] = operatorFields\n      }\n    }\n  })\n\n  convertedITC.addFields(convertedFields)\n  return convertedITC\n}\n\nconst removeEmptyFields = (\n  { schemaComposer, inputTypeComposer },\n  cache = new Set()\n) => {\n  const convert = itc => {\n    if (cache.has(itc)) {\n      return itc\n    }\n    cache.add(itc)\n    const fields = itc.getFields()\n    const nonEmptyFields = {}\n    Object.keys(fields).forEach(fieldName => {\n      const fieldITC = fields[fieldName]\n      if (fieldITC instanceof InputTypeComposer) {\n        const convertedITC = convert(fieldITC)\n        if (convertedITC.getFieldNames().length) {\n          nonEmptyFields[fieldName] = convertedITC\n        }\n      } else {\n        nonEmptyFields[fieldName] = fieldITC\n      }\n    })\n    itc.setFields(nonEmptyFields)\n    return itc\n  }\n  return convert(inputTypeComposer)\n}\n\nconst getFilterInput = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  const filterInputComposer = schemaComposer.getOrCreateITC(\n    `${typeName}FilterInput`\n  )\n  const inputTypeComposer = typeComposer.getInputTypeComposer()\n\n  // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.\n  // Remove this workaround for v3.\n  if (\n    inputTypeComposer.hasField(`id`) &&\n    getNamedType(inputTypeComposer.getFieldType(`id`)).name === `ID`\n  ) {\n    inputTypeComposer.extendField(`id`, { type: `String` })\n  }\n\n  const filterInputTC = convert({\n    schemaComposer,\n    inputTypeComposer,\n    filterInputComposer,\n  })\n\n  return removeEmptyFields({ schemaComposer, inputTypeComposer: filterInputTC })\n}\n\nmodule.exports = { getFilterInput }\n\nconst EQ = `eq`\nconst NE = `ne`\nconst GT = `gt`\nconst GTE = `gte`\nconst LT = `lt`\nconst LTE = `lte`\nconst IN = `in`\nconst NIN = `nin`\nconst REGEX = `regex`\nconst GLOB = `glob`\n\nconst ALLOWED_OPERATORS = {\n  Boolean: [EQ, NE, IN, NIN],\n  Date: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  Float: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  ID: [EQ, NE, IN, NIN],\n  Int: [EQ, NE, GT, GTE, LT, LTE, IN, NIN],\n  JSON: [EQ, NE, IN, NIN, REGEX, GLOB],\n  String: [EQ, NE, IN, NIN, REGEX, GLOB],\n  Enum: [EQ, NE, IN, NIN],\n  CustomScalar: [EQ, NE, IN, NIN],\n}\n\nconst ARRAY_OPERATORS = [IN, NIN]\n\nconst getOperatorFields = (fieldType, operators) => {\n  const result = {}\n  operators.forEach(op => {\n    if (ARRAY_OPERATORS.includes(op)) {\n      result[op] = [fieldType]\n    } else {\n      result[op] = fieldType\n    }\n  })\n  return result\n}\n\nconst getQueryOperatorInput = ({ schemaComposer, type }) => {\n  let typeName\n  if (type instanceof GraphQLEnumType) {\n    typeName = `Enum`\n  } else if (isBuiltInScalarType(type)) {\n    typeName = type.name\n  } else {\n    typeName = `CustomScalar`\n  }\n  const operators = ALLOWED_OPERATORS[typeName]\n  return schemaComposer.getOrCreateITC(type.name + `QueryOperatorInput`, itc =>\n    itc.addFields(getOperatorFields(type, operators))\n  )\n}\n\nconst getQueryOperatorListInput = ({ schemaComposer, inputTypeComposer }) => {\n  const typeName = inputTypeComposer.getTypeName().replace(/Input/, `ListInput`)\n  return schemaComposer.getOrCreateITC(typeName, itc => {\n    itc.addFields({\n      elemMatch: inputTypeComposer,\n    })\n  })\n}\n\nconst isBuiltInScalarType = type =>\n  isSpecifiedScalarType(type) || type === GraphQLDate || type === GraphQLJSON\n"],"file":"filter.js"}