{"version":3,"sources":["../../../src/schema/types/node-interface.js"],"names":["getOrCreateNodeInterface","schemaComposer","internalTC","getOrCreateOTC","tc","addFields","content","contentDigest","description","fieldOwners","ignoreType","mediaType","owner","type","getInputTypeComposer","nodeInterfaceTC","getOrCreateIFTC","setDescription","id","parent","resolve","source","args","context","info","path","nodeModel","getNodeById","children","getNodesByIds","ids","internal","getTypeNonNull","nodeInputTC","extendField","addNodeInterface","typeComposer","addInterface","addNodeInterfaceFields","getFields","setResolveType","node","addSchemaMustHaveType","getNodeInterface","module","exports"],"mappings":"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","sourcesContent":["const getOrCreateNodeInterface = schemaComposer => {\n  // TODO: why is `mediaType` on Internal? Applies only to File!?\n  // `fieldOwners` is an object\n  // Should we drop ignoreType?\n  const internalTC = schemaComposer.getOrCreateOTC(`Internal`, tc => {\n    tc.addFields({\n      content: `String`,\n      contentDigest: `String!`,\n      description: `String`,\n      fieldOwners: [`String`],\n      ignoreType: `Boolean`,\n      mediaType: `String`,\n      owner: `String!`,\n      type: `String!`,\n    })\n    // TODO: Can be removed with graphql-compose 5.11\n    tc.getInputTypeComposer()\n  })\n\n  const nodeInterfaceTC = schemaComposer.getOrCreateIFTC(`Node`, tc => {\n    tc.setDescription(`Node Interface`)\n    tc.addFields({\n      id: `ID!`,\n      parent: {\n        type: `Node`,\n        resolve: (source, args, context, info) => {\n          const { path } = context\n          return context.nodeModel.getNodeById({ id: source.parent }, { path })\n        },\n      },\n      children: {\n        type: `[Node!]!`,\n        resolve: (source, args, context, info) => {\n          const { path } = context\n          return context.nodeModel.getNodesByIds(\n            { ids: source.children },\n            { path }\n          )\n        },\n      },\n      internal: internalTC.getTypeNonNull(),\n    })\n    // TODO: In Gatsby v2, the NodeInput.id field is of type String, not ID.\n    // Remove this workaround for v3.\n    const nodeInputTC = tc.getInputTypeComposer()\n    nodeInputTC.extendField(`id`, { type: `String` })\n  })\n\n  return nodeInterfaceTC\n}\n\nconst addNodeInterface = ({ schemaComposer, typeComposer }) => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addInterface(nodeInterfaceTC)\n  addNodeInterfaceFields({ schemaComposer, typeComposer })\n}\n\nconst addNodeInterfaceFields = ({ schemaComposer, typeComposer }) => {\n  const nodeInterfaceTC = getOrCreateNodeInterface(schemaComposer)\n  typeComposer.addFields(nodeInterfaceTC.getFields())\n  nodeInterfaceTC.setResolveType(node => node.internal.type)\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n}\n\nconst getNodeInterface = ({ schemaComposer }) =>\n  getOrCreateNodeInterface(schemaComposer)\n\nmodule.exports = {\n  addNodeInterface,\n  addNodeInterfaceFields,\n  getNodeInterface,\n}\n"],"file":"node-interface.js"}