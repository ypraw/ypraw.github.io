{"version":3,"sources":["../../src/schema/index.js"],"names":["tracer","require","globalTracer","store","nodeStore","createSchemaComposer","buildSchema","rebuildSchemaWithSitePage","TypeConflictReporter","module","exports","build","parentSpan","spanArgs","childOf","span","startSpan","getState","schemaCustomization","thirdPartySchemas","types","typeMapping","config","mapping","typeConflictReporter","sortedTypes","sort","type","plugin","name","schemaComposer","schema","printConflicts","dispatch","payload","finish","rebuildWithSitePage","composer"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst nodeStore = require(`../db/nodes`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema, rebuildSchemaWithSitePage } = require(`./schema`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\n\nmodule.exports.build = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  let {\n    schemaCustomization: { thirdPartySchemas, types },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  // Ensure that user-defined types are processed last\n  const sortedTypes = types.sort(\n    type => type.plugin && type.plugin.name === `default-site-plugin`\n  )\n\n  const schemaComposer = createSchemaComposer()\n  const schema = await buildSchema({\n    schemaComposer,\n    nodeStore,\n    types: sortedTypes,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nmodule.exports.rebuildWithSitePage = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(\n    `rebuild schema with SitePage context`,\n    spanArgs\n  )\n  let {\n    schemaCustomization: { composer: schemaComposer },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const schema = await rebuildSchemaWithSitePage({\n    schemaComposer,\n    nodeStore,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n"],"file":"index.js"}