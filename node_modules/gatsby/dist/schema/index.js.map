{"version":3,"sources":["../../src/schema/index.js"],"names":["tracer","require","globalTracer","store","nodeStore","createSchemaComposer","buildSchema","rebuildSchemaWithSitePage","builtInFieldExtensions","TypeConflictReporter","getAllFieldExtensions","schemaCustomization","fieldExtensions","customFieldExtensions","getState","build","parentSpan","spanArgs","childOf","span","startSpan","thirdPartySchemas","types","printConfig","inferenceMetadata","config","mapping","typeMapping","typeConflictReporter","sortedTypes","filter","type","plugin","name","schemaComposer","schema","printConflicts","dispatch","payload","finish","rebuildWithSitePage","composer","module","exports","rebuild"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst nodeStore = require(`../db/nodes`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema, rebuildSchemaWithSitePage } = require(`./schema`)\nconst { builtInFieldExtensions } = require(`./extensions`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\n\nconst getAllFieldExtensions = () => {\n  const {\n    schemaCustomization: { fieldExtensions: customFieldExtensions },\n  } = store.getState()\n\n  return {\n    ...customFieldExtensions,\n    ...builtInFieldExtensions,\n  }\n}\n\nconst build = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  const {\n    schemaCustomization: { thirdPartySchemas, types, printConfig },\n    inferenceMetadata,\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  // Ensure that user-defined types are processed last\n  const sortedTypes = [\n    ...types.filter(\n      type => type.plugin && type.plugin.name !== `default-site-plugin`\n    ),\n    ...types.filter(\n      type => !type.plugin || type.plugin.name === `default-site-plugin`\n    ),\n  ]\n\n  const fieldExtensions = getAllFieldExtensions()\n  const schemaComposer = createSchemaComposer({ fieldExtensions })\n  const schema = await buildSchema({\n    schemaComposer,\n    nodeStore,\n    types: sortedTypes,\n    fieldExtensions,\n    thirdPartySchemas,\n    typeMapping,\n    printConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nconst rebuildWithSitePage = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(\n    `rebuild schema with SitePage context`,\n    spanArgs\n  )\n\n  const {\n    schemaCustomization: { composer: schemaComposer },\n    config: { mapping: typeMapping },\n    inferenceMetadata,\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const schema = await rebuildSchemaWithSitePage({\n    schemaComposer,\n    nodeStore,\n    fieldExtensions: getAllFieldExtensions(),\n    typeMapping,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nmodule.exports = {\n  build,\n  rebuild: build,\n  rebuildWithSitePage,\n}\n"],"file":"index.js"}