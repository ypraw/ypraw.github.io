{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","parse","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","processFieldExtensions","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","thirdPartySchemas","typeMapping","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","values","map","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addResolvers","addConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypeDefs","typeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","getTypeName","checkIsAllowedTypeName","has","get","mergeTypes","name","typeOwner","getExtension","merge","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","warn","addAsComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","noDefaultResolvers","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","hasExtension","endsWith","includes","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","JSON","stringify","tc","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getFields","getTypeMap","Object","keys","createTC","field","getField","fieldType","toString","replace","extendField","intermediateSchema","createResolvers","resolvers","fieldConfig","hasField","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","addResolver","filter","sort","skip","limit","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","undefined","value","queryName","queryNamePlural","getResolver","parseTypes","doc","definitions","def","parsedType","typeMapper","makeSchemaDef","set","push","message","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","panic","arr","item"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n  parse,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst { processFieldExtensions } = require(`./extensions`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  thirdPartySchemas,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getOTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(schemaComposer.values()).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({ schemaComposer, typeComposer, parentSpan })\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addResolvers({ schemaComposer, typeComposer, parentSpan })\n      await addConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypeDefs({\n          typeDefs: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // Only allow user or plugin owning the type to extend already existing type.\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  if (\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner\n  ) {\n    typeComposer.merge(type)\n    if (isNamedTypeComposer(type)) {\n      typeComposer.extendExtensions(type.getExtensions())\n    }\n    addExtensions({ typeComposer, plugin, createdFrom })\n    return true\n  } else {\n    report.warn(\n      `Plugin \\`${plugin.name}\\` tried to define the GraphQL type ` +\n        `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n        `by the plugin \\`${typeOwner}\\`.`\n    )\n    return false\n  }\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({ typeComposer, plugin, createdFrom }) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`:\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan: parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan: parentSpan,\n  })\n}\n\nconst addResolvers = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n  typeComposer.addResolver({\n    name: `findOne`,\n    type: typeComposer,\n    args: {\n      ...filterInputTC.getFields(),\n    },\n    resolve: findOne(typeName),\n  })\n  typeComposer.addResolver({\n    name: `findManyPaginated`,\n    type: paginationTC,\n    args: {\n      filter: filterInputTC,\n      sort: sortInputTC,\n      skip: `Int`,\n      limit: `Int`,\n    },\n    resolve: findManyPaginated(typeName),\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n  schemaComposer.Query.addFields({\n    [queryName]: typeComposer.getResolver(`findOne`),\n    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),\n  })\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name\n      schemaComposer.typeMapper.set(typeComposer.getTypeName(), typeComposer)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst parseTypeDefs = ({\n  typeDefs,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const doc = parse(typeDefs)\n  return parseTypes({ doc, plugin, createdFrom, schemaComposer, parentSpan })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const report = require(`gatsby-cli/lib/reporter`)\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n"],"file":"schema.js"}