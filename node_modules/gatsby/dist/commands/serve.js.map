{"version":3,"sources":["../../src/commands/serve.js"],"names":["path","require","openurl","fs","compression","express","chalk","reachMatch","match","rl","onExit","telemetry","detectPortInUseAndPrompt","getConfigFile","preferDefault","rlInterface","createInterface","input","process","stdin","output","stdout","on","exit","trackCli","readMatchPaths","program","filePath","join","directory","rawJSON","readFile","JSON","parse","matchPathRouter","matchPaths","options","req","res","next","url","accepts","matchPath","find","sendFile","err","module","exports","startBackgroundUpdate","prefixPaths","port","open","host","parseInt","config","configPathPrefix","pathPrefix","root","app","router","Router","use","expressMiddleware","static","status","header","startListening","listen","openUrlString","console","log","blue","bold","Promise","resolve","catch","yellow"],"mappings":"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","sourcesContent":["/* @flow weak */\nconst path = require(`path`)\nconst openurl = require(`better-opn`)\nconst fs = require(`fs-extra`)\nconst compression = require(`compression`)\nconst express = require(`express`)\nconst chalk = require(`chalk`)\nconst { match: reachMatch } = require(`@reach/router/lib/utils`)\nconst rl = require(`readline`)\nconst onExit = require(`signal-exit`)\n\nconst telemetry = require(`gatsby-telemetry`)\n\nconst detectPortInUseAndPrompt = require(`../utils/detect-port-in-use-and-prompt`)\nconst getConfigFile = require(`../bootstrap/get-config-file`)\nconst preferDefault = require(`../bootstrap/prefer-default`)\n\nconst rlInterface = rl.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n})\n\n// Quit immediately on hearing ctrl-c\nrlInterface.on(`SIGINT`, () => {\n  process.exit()\n})\n\nonExit(() => {\n  telemetry.trackCli(`SERVE_STOP`)\n})\n\nconst readMatchPaths = async program => {\n  const filePath = path.join(program.directory, `.cache`, `match-paths.json`)\n  const rawJSON = await fs.readFile(filePath)\n  return JSON.parse(rawJSON)\n}\n\nconst matchPathRouter = (matchPaths, options) => (req, res, next) => {\n  const { url } = req\n  if (req.accepts(`html`)) {\n    const matchPath = matchPaths.find(\n      ({ matchPath }) => reachMatch(matchPath, url) !== null\n    )\n    if (matchPath) {\n      return res.sendFile(\n        path.join(matchPath.path, `index.html`),\n        options,\n        err => {\n          if (err) {\n            next()\n          }\n        }\n      )\n    }\n  }\n  return next()\n}\n\nmodule.exports = async program => {\n  telemetry.trackCli(`SERVE_START`)\n  telemetry.startBackgroundUpdate()\n  let { prefixPaths, port, open, host } = program\n  port = typeof port === `string` ? parseInt(port, 10) : port\n\n  const config = await preferDefault(\n    getConfigFile(program.directory, `gatsby-config`)\n  )\n\n  const { pathPrefix: configPathPrefix } = config || {}\n\n  const pathPrefix = prefixPaths && configPathPrefix ? configPathPrefix : `/`\n\n  const root = path.join(program.directory, `public`)\n\n  const app = express()\n  const router = express.Router()\n\n  app.use(telemetry.expressMiddleware(`SERVE`))\n\n  router.use(compression())\n  router.use(express.static(`public`))\n  const matchPaths = await readMatchPaths(program)\n  router.use(matchPathRouter(matchPaths, { root }))\n  router.use((req, res, next) => {\n    if (req.accepts(`html`)) {\n      return res.status(404).sendFile(`404.html`, { root })\n    }\n    return next()\n  })\n  app.use(function(req, res, next) {\n    res.header(`Access-Control-Allow-Origin`, `http://${host}:${port}`)\n    res.header(`Access-Control-Allow-Credentials`, true)\n    res.header(\n      `Access-Control-Allow-Headers`,\n      `Origin, X-Requested-With, Content-Type, Accept`\n    )\n    next()\n  })\n  app.use(pathPrefix, router)\n\n  const startListening = () => {\n    app.listen(port, host, () => {\n      let openUrlString = `http://${host}:${port}${pathPrefix}`\n      console.log(\n        `${chalk.blue(`info`)} gatsby serve running at: ${chalk.bold(\n          openUrlString\n        )}`\n      )\n      if (open) {\n        console.log(`${chalk.blue(`info`)} Opening browser...`)\n        Promise.resolve(openurl(openUrlString)).catch(err =>\n          console.log(\n            `${chalk.yellow(\n              `warn`\n            )} Browser not opened because no browser was found`\n          )\n        )\n      }\n    })\n  }\n\n  port = await detectPortInUseAndPrompt(port, rlInterface)\n  startListening()\n}\n"],"file":"serve.js"}