{"version":3,"sources":["../../src/query/index.js"],"names":["_","require","Queue","convertHrtime","store","emitter","queryQueue","boundActionCreators","seenIdsWithoutDataDependencies","queuedDirtyActions","extractedQueryIds","Set","on","action","filter","p","payload","path","push","popExtractedQueries","queries","clear","findIdsWithoutDataDependencies","state","allTrackedIds","uniq","flatten","concat","values","componentDataDependencies","nodes","connections","notTrackedIds","difference","Array","from","pages","staticQueryComponents","map","c","id","popNodeQueries","actions","a","uniqDirties","reduce","dirtyIds","node","internal","type","compact","popNodeAndDepQueries","nodeQueries","noDepQueries","calcDirtyQueryIds","union","calcInitialDirtyQueryIds","nodeAndNoDepQueries","extractedQueriesThatNeedRunning","intersection","groupQueryIds","queryIds","grouped","groupBy","slice","staticQueryIds","static","pageQueryIds","page","reportStats","queue","activity","startQueries","process","hrtime","stats","getStats","setStatus","total","peak","seconds","toFixed","processQueries","queryJobs","createBuildQueue","processBatch","createStaticQueryJob","queryId","component","get","hash","query","componentPath","context","processStaticQueries","getState","createPageQueryJob","components","isPage","processPageQueries","listenerQueue","runQueuedQueries","startListening","callback","then","catch","enqueueExtractedQueryId","pathname","add","getPagesForComponent","enqueueExtractedPageComponent","deleteComponentsDependencies","forEach","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst Queue = require(`better-queue`)\nconst convertHrtime = require(`convert-hrtime`)\nconst { store, emitter } = require(`../redux`)\nconst queryQueue = require(`./queue`)\nconst { boundActionCreators } = require(`../redux/actions`)\n\nlet seenIdsWithoutDataDependencies = []\nlet queuedDirtyActions = []\nconst extractedQueryIds = new Set()\n\n// Remove pages from seenIdsWithoutDataDependencies when they're deleted\n// so their query will be run again if they're created again.\nemitter.on(`DELETE_PAGE`, action => {\n  seenIdsWithoutDataDependencies = seenIdsWithoutDataDependencies.filter(\n    p => p !== action.payload.path\n  )\n})\n\nemitter.on(`CREATE_NODE`, action => {\n  queuedDirtyActions.push(action)\n})\n\nemitter.on(`DELETE_NODE`, action => {\n  queuedDirtyActions.push({ payload: action.payload })\n})\n\n/////////////////////////////////////////////////////////////////////\n// Calculate dirty static/page queries\n\nconst popExtractedQueries = () => {\n  const queries = [...extractedQueryIds]\n  extractedQueryIds.clear()\n  return queries\n}\n\nconst findIdsWithoutDataDependencies = state => {\n  const allTrackedIds = _.uniq(\n    _.flatten(\n      _.concat(\n        _.values(state.componentDataDependencies.nodes),\n        _.values(state.componentDataDependencies.connections)\n      )\n    )\n  )\n\n  // Get list of paths not already tracked and run the queries for these\n  // paths.\n  const notTrackedIds = _.difference(\n    [\n      ...Array.from(state.pages.values(), p => p.path),\n      ...[...state.staticQueryComponents.values()].map(c => c.id),\n    ],\n    [...allTrackedIds, ...seenIdsWithoutDataDependencies]\n  )\n\n  // Add new IDs to our seen array so we don't keep trying to run queries for them.\n  // Pages without queries can't be tracked.\n  seenIdsWithoutDataDependencies = _.uniq([\n    ...notTrackedIds,\n    ...seenIdsWithoutDataDependencies,\n  ])\n\n  return notTrackedIds\n}\n\nconst popNodeQueries = state => {\n  const actions = _.uniq(queuedDirtyActions, a => a.payload.id)\n  const uniqDirties = _.uniq(\n    actions.reduce((dirtyIds, action) => {\n      const node = action.payload\n\n      if (!node || !node.id || !node.internal.type) return dirtyIds\n\n      // Find components that depend on this node so are now dirty.\n      dirtyIds = dirtyIds.concat(state.componentDataDependencies.nodes[node.id])\n\n      // Find connections that depend on this node so are now invalid.\n      dirtyIds = dirtyIds.concat(\n        state.componentDataDependencies.connections[node.internal.type]\n      )\n\n      return _.compact(dirtyIds)\n    }, [])\n  )\n  queuedDirtyActions = []\n  return uniqDirties\n}\n\nconst popNodeAndDepQueries = state => {\n  const nodeQueries = popNodeQueries(state)\n\n  const noDepQueries = findIdsWithoutDataDependencies(state)\n\n  return _.uniq([...nodeQueries, ...noDepQueries])\n}\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or\n * staticQuery.hash's). These are queries that:\n *\n * - depend on nodes or node collections (via\n *   `actions.createPageDependency`) that have changed.\n * - do NOT have node dependencies. Since all queries should return\n *   data, then this implies that node dependencies have not been\n *   tracked, and therefore these queries haven't been run before\n * - have been recently extracted (see `./query-watcher.js`)\n *\n * Note, this function pops queries off internal queues, so it's up\n * to the caller to reference the results\n */\n\nconst calcDirtyQueryIds = state =>\n  _.union(popNodeAndDepQueries(state), popExtractedQueries())\n\n/**\n * Same as `calcDirtyQueryIds`, except that we only include extracted\n * queries that depend on nodes or haven't been run yet. We do this\n * because the page component reducer/machine always enqueues\n * extractedQueryIds but during bootstrap we may not want to run those\n * page queries if their data hasn't changed since the last time we\n * ran Gatsby.\n */\nconst calcInitialDirtyQueryIds = state => {\n  const nodeAndNoDepQueries = popNodeAndDepQueries(state)\n\n  const extractedQueriesThatNeedRunning = _.intersection(\n    popExtractedQueries(),\n    nodeAndNoDepQueries\n  )\n  return _.union(extractedQueriesThatNeedRunning, nodeAndNoDepQueries)\n}\n\n/**\n * groups queryIds by whether they are static or page queries.\n */\nconst groupQueryIds = queryIds => {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n  return {\n    staticQueryIds: grouped.static || [],\n    pageQueryIds: grouped.page || [],\n  }\n}\n\nconst reportStats = (queue, activity) => {\n  const startQueries = process.hrtime()\n  queue.on(`task_finish`, () => {\n    const stats = queue.getStats()\n    activity.setStatus(\n      `${stats.total}/${stats.peak} ${(\n        stats.total / convertHrtime(process.hrtime(startQueries)).seconds\n      ).toFixed(2)} queries/second`\n    )\n  })\n}\n\nconst processQueries = async (queryJobs, activity) => {\n  const queue = queryQueue.createBuildQueue()\n  reportStats(queue, activity)\n  await queryQueue.processBatch(queue, queryJobs)\n}\n\nconst createStaticQueryJob = (state, queryId) => {\n  const component = state.staticQueryComponents.get(queryId)\n  const { hash, id, query, componentPath } = component\n  return {\n    id: hash,\n    hash,\n    query,\n    componentPath,\n    context: { path: id },\n  }\n}\n\nconst processStaticQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  await processQueries(\n    queryIds.map(id => createStaticQueryJob(state, id)),\n    activity\n  )\n}\n\nconst createPageQueryJob = (state, page) => {\n  const component = state.components.get(page.componentPath)\n  const { path, componentPath, context } = page\n  const { query } = component\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n\nconst processPageQueries = async (queryIds, { state, activity }) => {\n  state = state || store.getState()\n  // Make sure we filter out pages that don't exist. An example is\n  // /dev-404-page/, whose SitePage node is created via\n  // `internal-data-bridge`, but the actual page object is only\n  // created during `gatsby develop`.\n  const pages = _.filter(queryIds.map(id => state.pages.get(id)))\n  await processQueries(\n    pages.map(page => createPageQueryJob(state, page)),\n    activity\n  )\n}\n\n/////////////////////////////////////////////////////////////////////\n// Listener for gatsby develop\n\n// Initialized via `startListening`\nlet listenerQueue\n\n/**\n * Run any dirty queries. See `calcQueries` for what constitutes a\n * dirty query\n */\nconst runQueuedQueries = () => {\n  if (listenerQueue) {\n    const state = store.getState()\n    const { staticQueryIds, pageQueryIds } = groupQueryIds(\n      calcDirtyQueryIds(state)\n    )\n    const pages = _.filter(pageQueryIds.map(id => state.pages.get(id)))\n    const queryJobs = [\n      ...staticQueryIds.map(id => createStaticQueryJob(state, id)),\n      ...pages.map(page => createPageQueryJob(state, page)),\n    ]\n    listenerQueue.push(queryJobs)\n  }\n}\n\n/**\n * Starts a background process that processes any dirty queries\n * whenever one of the following occurs:\n *\n * 1. A node has changed (but only after the api call has finished\n * running)\n * 2. A component query (e.g by editing a React Component) has\n * changed\n *\n * For what constitutes a dirty query, see `calcQueries`\n */\nconst startListening = queue => {\n  // We use a queue to process batches of queries so that they are\n  // processed consecutively\n  listenerQueue = new Queue((queryJobs, callback) =>\n    queryQueue\n      .processBatch(queue, queryJobs)\n      .then(() => callback(null))\n      .catch(callback)\n  )\n\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, runQueuedQueries)\n}\n\nconst enqueueExtractedQueryId = pathname => {\n  extractedQueryIds.add(pathname)\n}\n\nconst getPagesForComponent = componentPath => {\n  const state = store.getState()\n  return [...state.pages.values()].filter(\n    p => p.componentPath === componentPath\n  )\n}\n\nconst enqueueExtractedPageComponent = componentPath => {\n  const pages = getPagesForComponent(componentPath)\n  // Remove page data dependencies before re-running queries because\n  // the changing of the query could have changed the data dependencies.\n  // Re-running the queries will add back data dependencies.\n  boundActionCreators.deleteComponentsDependencies(\n    pages.map(p => p.path || p.id)\n  )\n  pages.forEach(page => enqueueExtractedQueryId(page.path))\n  runQueuedQueries()\n}\n\nmodule.exports = {\n  calcInitialDirtyQueryIds,\n  groupQueryIds,\n  processStaticQueries,\n  processPageQueries,\n  startListening,\n  runQueuedQueries,\n  enqueueExtractedQueryId,\n  enqueueExtractedPageComponent,\n}\n"],"file":"index.js"}