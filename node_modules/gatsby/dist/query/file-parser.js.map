{"version":3,"sources":["../../src/query/file-parser.js"],"names":["fs","require","crypto","_","getGraphQLTag","report","apiRunnerNode","boundActionCreators","generateQueryName","def","hash","file","name","value","camelCase","kind","warnForUnknownQueryVariable","varName","usageFunction","warn","parseToAst","filePath","fileStr","ast","transpiled","filename","contents","length","item","tmp","error","queryExtractionGraphQLError","componentPath","undefined","queryExtractionBabelError","warnForGlobalTag","findGraphQLTags","text","Promise","resolve","reject","then","queries","documentLocations","WeakMap","extractStaticQuery","taggedTemplateExpressPath","isHook","gqlAst","isGlobal","definitions","forEach","set","node","start","loc","map","d","isStaticQuery","push","JSXElement","path","openingElement","traverse","JSXAttribute","jsxPath","TaggedTemplateExpression","templatePath","Identifier","identifierPath","found","VariableDeclarator","varPath","id","init","type","CallExpression","hookPath","callee","get","referencesImport","firstArg","isTaggedTemplateExpression","isIdentifier","ExportNamedDeclaration","state","innerPath","uniqueQueries","uniqBy","q","catch","cache","FileParser","parseFile","readFile","err","indexOf","createHash","update","digest","astDefinitions","queryExtractedBabelSuccess","parseFiles","files","documents","Map","all","doc"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\n\n// Traverse is a es6 module...\nimport traverse from \"@babel/traverse\"\nconst getGraphQLTag = require(`babel-plugin-remove-graphql-queries`)\n  .getGraphQLTag\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { boundActionCreators } = require(`../redux/actions`)\n\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    def.name = {\n      value: `${_.camelCase(file)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\nconst warnForUnknownQueryVariable = (varName, file, usageFunction) =>\n  report.warn(\n    `\\nWe were unable to find the declaration of variable \"${varName}\", which you passed as the \"query\" prop into the ${usageFunction} declaration in \"${file}\".\n\nPerhaps the variable name has a typo?\n\nAlso note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into \"${file}\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\\n`\n  )\n\nasync function parseToAst(filePath, fileStr) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n  })\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        report.error(error)\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        continue\n      }\n    }\n    if (ast === undefined) {\n      report.error(`Failed to parse preprocessed file ${filePath}`)\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: filePath,\n      })\n\n      return null\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      boundActionCreators.queryExtractionBabelError({\n        componentPath: filePath,\n        error,\n      })\n      report.error(\n        `There was a problem parsing \"${filePath}\"; any GraphQL ` +\n          `fragments or queries in this file were not processed. \\n` +\n          `This may indicate a syntax error in the code, or it may be a file type ` +\n          `that Gatsby does not know how to parse.`\n      )\n\n      return null\n    }\n  }\n\n  return ast\n}\n\nconst warnForGlobalTag = file =>\n  report.warn(\n    `Using the global \\`graphql\\` tag is deprecated, and will not be supported in v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\nasync function findGraphQLTags(file, text): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text)\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        /**\n         * A map of graphql documents to unique locations.\n         *\n         * A graphql document's unique location is made of:\n         *\n         *  - the location of the graphql template literal that contains the document, and\n         *  - the document's location within the graphql template literal\n         *\n         * This is used to prevent returning duplicated documents.\n         */\n        const documentLocations = new WeakMap()\n\n        const extractStaticQuery = (\n          taggedTemplateExpressPath,\n          isHook = false\n        ) => {\n          const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(\n            taggedTemplateExpressPath\n          )\n          if (!gqlAst) return\n\n          if (isGlobal) warnForGlobalTag(file)\n\n          gqlAst.definitions.forEach(def => {\n            documentLocations.set(\n              def,\n              `${taggedTemplateExpressPath.node.start}-${def.loc.start}`\n            )\n            generateQueryName({\n              def,\n              hash,\n              file,\n            })\n          })\n\n          const definitions = [...gqlAst.definitions].map(d => {\n            d.isStaticQuery = true\n            d.isHook = isHook\n            d.text = text\n            d.hash = hash\n            return d\n          })\n\n          queries.push(...definitions)\n        }\n\n        // Look for queries in <StaticQuery /> elements.\n        traverse(ast, {\n          JSXElement(path) {\n            if (path.node.openingElement.name.name !== `StaticQuery`) {\n              return\n            }\n\n            // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm\n            // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466\n            path.traverse({\n              JSXAttribute(jsxPath) {\n                if (jsxPath.node.name.name !== `query`) {\n                  return\n                }\n                jsxPath.traverse({\n                  // Assume the query is inline in the component and extract that.\n                  TaggedTemplateExpression(templatePath) {\n                    extractStaticQuery(templatePath)\n                  },\n                  // Also see if it's a variable that's passed in as a prop\n                  // and if it is, go find it.\n                  Identifier(identifierPath) {\n                    if (identifierPath.node.name !== `graphql`) {\n                      const varName = identifierPath.node.name\n                      let found = false\n                      traverse(ast, {\n                        VariableDeclarator(varPath) {\n                          if (\n                            varPath.node.id.name === varName &&\n                            varPath.node.init.type ===\n                              `TaggedTemplateExpression`\n                          ) {\n                            varPath.traverse({\n                              TaggedTemplateExpression(templatePath) {\n                                found = true\n                                extractStaticQuery(templatePath)\n                              },\n                            })\n                          }\n                        },\n                      })\n                      if (!found) {\n                        warnForUnknownQueryVariable(\n                          varName,\n                          file,\n                          `<StaticQuery>`\n                        )\n                      }\n                    }\n                  },\n                })\n              },\n            })\n            return\n          },\n        })\n\n        // Look for queries in useStaticQuery hooks.\n        traverse(ast, {\n          CallExpression(hookPath) {\n            if (\n              hookPath.node.callee.name !== `useStaticQuery` ||\n              !hookPath.get(`callee`).referencesImport(`gatsby`)\n            ) {\n              return\n            }\n\n            const firstArg = hookPath.get(`arguments`)[0]\n\n            // Assume the query is inline in the component and extract that.\n            if (firstArg.isTaggedTemplateExpression()) {\n              extractStaticQuery(firstArg, true)\n              // Also see if it's a variable that's passed in as a prop\n              // and if it is, go find it.\n            } else if (firstArg.isIdentifier()) {\n              if (\n                firstArg.node.name !== `graphql` &&\n                firstArg.node.name !== `useStaticQuery`\n              ) {\n                const varName = firstArg.node.name\n                let found = false\n                traverse(ast, {\n                  VariableDeclarator(varPath) {\n                    if (\n                      varPath.node.id.name === varName &&\n                      varPath.node.init.type === `TaggedTemplateExpression`\n                    ) {\n                      varPath.traverse({\n                        TaggedTemplateExpression(templatePath) {\n                          found = true\n                          extractStaticQuery(templatePath, true)\n                        },\n                      })\n                    }\n                  },\n                })\n                if (!found) {\n                  warnForUnknownQueryVariable(varName, file, `useStaticQuery`)\n                }\n              }\n            }\n          },\n        })\n\n        // Look for exported page queries\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const { ast: gqlAst, isGlobal, hash } = getGraphQLTag(innerPath)\n                if (!gqlAst) return\n\n                if (isGlobal) warnForGlobalTag(file)\n\n                gqlAst.definitions.forEach(def => {\n                  documentLocations.set(\n                    def,\n                    `${innerPath.node.start}-${def.loc.start}`\n                  )\n                  generateQueryName({\n                    def,\n                    hash,\n                    file,\n                  })\n                })\n\n                queries.push(...gqlAst.definitions)\n              },\n            })\n          },\n        })\n\n        // Remove duplicate queries\n        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q))\n\n        resolve(uniqueQueries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  async parseFile(file: string): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      report.error(`There was a problem reading the file: ${file}`, err)\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] || (cache[hash] = await findGraphQLTags(file, text))\n\n      // If any AST definitions were extracted, report success.\n      // This can mean there is none or there was a babel error when\n      // we tried to extract the graphql AST.\n      if (astDefinitions.length > 0) {\n        boundActionCreators.queryExtractedBabelSuccess({\n          componentPath: file,\n        })\n      }\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      report.error(\n        `There was a problem parsing the GraphQL query in file: ${file}`,\n        err\n      )\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n  }\n\n  async parseFiles(files: Array<string>): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}