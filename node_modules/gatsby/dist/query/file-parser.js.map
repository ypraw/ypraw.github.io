{"version":3,"sources":["../../src/query/file-parser.js"],"names":["fs","require","crypto","_","getGraphQLTag","StringInterpolationNotAllowedError","EmptyGraphQLTagError","GraphQLSyntaxError","report","apiRunnerNode","boundActionCreators","generateQueryName","def","hash","file","name","value","camelCase","kind","warnForUnknownQueryVariable","varName","usageFunction","warn","parseToAst","filePath","fileStr","parentSpan","addError","ast","transpiled","filename","contents","length","item","tmp","error","queryExtractionGraphQLError","componentPath","undefined","id","context","queryExtractionBabelError","warnForGlobalTag","findGraphQLTags","text","Promise","resolve","reject","then","queries","documentLocations","WeakMap","extractStaticQuery","taggedTemplateExpressPath","isHook","gqlAst","isGlobal","definitions","forEach","set","node","start","loc","map","d","isStaticQuery","traverse","TemplateElement","templateElementPath","templateLoc","push","JSXElement","path","openingElement","JSXAttribute","jsxPath","TaggedTemplateExpression","templatePath","Identifier","identifierPath","found","VariableDeclarator","varPath","init","type","CallExpression","hookPath","callee","get","referencesImport","firstArg","isTaggedTemplateExpression","isIdentifier","ExportNamedDeclaration","state","innerPath","uniqueQueries","uniqBy","q","catch","cache","FileParser","constructor","parseFile","readFile","err","indexOf","createHash","update","digest","astDefinitions","queryExtractedBabelSuccess","structuredError","location","interpolationStart","end","interpolationEnd","codeFrame","highlightCode","process","env","FORCE_COLOR","originalError","locations","message","sourceMessage","parseFiles","files","documents","Map","all","doc"],"mappings":"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","sourcesContent":["// @flow\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst _ = require(`lodash`)\n\n// Traverse is a es6 module...\nimport traverse from \"@babel/traverse\"\nconst {\n  getGraphQLTag,\n  StringInterpolationNotAllowedError,\n  EmptyGraphQLTagError,\n  GraphQLSyntaxError,\n} = require(`babel-plugin-remove-graphql-queries`)\n\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport type { DocumentNode, DefinitionNode } from \"graphql\"\nimport { babelParseToAst } from \"../utils/babel-parse-to-ast\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\n\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { boundActionCreators } = require(`../redux/actions`)\nimport { locInGraphQlToLocInFile } from \"./error-parser\"\n/**\n * Add autogenerated query name if it wasn't defined by user.\n */\nconst generateQueryName = ({ def, hash, file }) => {\n  if (!def.name || !def.name.value) {\n    def.name = {\n      value: `${_.camelCase(file)}${hash}`,\n      kind: `Name`,\n    }\n  }\n  return def\n}\n\nconst warnForUnknownQueryVariable = (varName, file, usageFunction) =>\n  report.warn(\n    `\\nWe were unable to find the declaration of variable \"${varName}\", which you passed as the \"query\" prop into the ${usageFunction} declaration in \"${file}\".\n\nPerhaps the variable name has a typo?\n\nAlso note that we are currently unable to use queries defined in files other than the file where the ${usageFunction} is defined. If you're attempting to import the query, please move it into \"${file}\". If being able to import queries from another file is an important capability for you, we invite your help fixing it.\\n`\n  )\n\nasync function parseToAst(filePath, fileStr, { parentSpan, addError } = {}) {\n  let ast\n\n  // Preprocess and attempt to parse source; return an AST if we can, log an\n  // error if we can't.\n  const transpiled = await apiRunnerNode(`preprocessSource`, {\n    filename: filePath,\n    contents: fileStr,\n    parentSpan: parentSpan,\n  })\n  if (transpiled && transpiled.length) {\n    for (const item of transpiled) {\n      try {\n        const tmp = babelParseToAst(item, filePath)\n        ast = tmp\n        break\n      } catch (error) {\n        boundActionCreators.queryExtractionGraphQLError({\n          componentPath: filePath,\n        })\n        continue\n      }\n    }\n    if (ast === undefined) {\n      addError({\n        id: `85912`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: filePath,\n      })\n\n      return null\n    }\n  } else {\n    try {\n      ast = babelParseToAst(fileStr, filePath)\n    } catch (error) {\n      boundActionCreators.queryExtractionBabelError({\n        componentPath: filePath,\n        error,\n      })\n\n      addError({\n        id: `85911`,\n        filePath,\n        context: {\n          filePath,\n        },\n      })\n\n      return null\n    }\n  }\n\n  return ast\n}\n\nconst warnForGlobalTag = file =>\n  report.warn(\n    `Using the global \\`graphql\\` tag is deprecated, and will not be supported in v3.\\n` +\n      `Import it instead like:  import { graphql } from 'gatsby' in file:\\n` +\n      file\n  )\n\nasync function findGraphQLTags(\n  file,\n  text,\n  { parentSpan, addError } = {}\n): Promise<Array<DefinitionNode>> {\n  return new Promise((resolve, reject) => {\n    parseToAst(file, text, { parentSpan, addError })\n      .then(ast => {\n        let queries = []\n        if (!ast) {\n          resolve(queries)\n          return\n        }\n\n        /**\n         * A map of graphql documents to unique locations.\n         *\n         * A graphql document's unique location is made of:\n         *\n         *  - the location of the graphql template literal that contains the document, and\n         *  - the document's location within the graphql template literal\n         *\n         * This is used to prevent returning duplicated documents.\n         */\n        const documentLocations = new WeakMap()\n\n        const extractStaticQuery = (\n          taggedTemplateExpressPath,\n          isHook = false\n        ) => {\n          const { ast: gqlAst, text, hash, isGlobal } = getGraphQLTag(\n            taggedTemplateExpressPath\n          )\n          if (!gqlAst) return\n\n          if (isGlobal) warnForGlobalTag(file)\n\n          gqlAst.definitions.forEach(def => {\n            documentLocations.set(\n              def,\n              `${taggedTemplateExpressPath.node.start}-${def.loc.start}`\n            )\n            generateQueryName({\n              def,\n              hash,\n              file,\n            })\n          })\n\n          const definitions = [...gqlAst.definitions].map(d => {\n            d.isStaticQuery = true\n            d.isHook = isHook\n            d.text = text\n            d.hash = hash\n\n            taggedTemplateExpressPath.traverse({\n              TemplateElement(templateElementPath) {\n                d.templateLoc = templateElementPath.node.loc\n              },\n            })\n\n            return d\n          })\n\n          queries.push(...definitions)\n        }\n\n        // Look for queries in <StaticQuery /> elements.\n        traverse(ast, {\n          JSXElement(path) {\n            if (path.node.openingElement.name.name !== `StaticQuery`) {\n              return\n            }\n\n            // astexplorer.com link I (@kyleamathews) used when prototyping this algorithm\n            // https://astexplorer.net/#/gist/ab5d71c0f08f287fbb840bf1dd8b85ff/2f188345d8e5a4152fe7c96f0d52dbcc6e9da466\n            path.traverse({\n              JSXAttribute(jsxPath) {\n                if (jsxPath.node.name.name !== `query`) {\n                  return\n                }\n                jsxPath.traverse({\n                  // Assume the query is inline in the component and extract that.\n                  TaggedTemplateExpression(templatePath) {\n                    extractStaticQuery(templatePath)\n                  },\n                  // Also see if it's a variable that's passed in as a prop\n                  // and if it is, go find it.\n                  Identifier(identifierPath) {\n                    if (identifierPath.node.name !== `graphql`) {\n                      const varName = identifierPath.node.name\n                      let found = false\n                      traverse(ast, {\n                        VariableDeclarator(varPath) {\n                          if (\n                            varPath.node.id.name === varName &&\n                            varPath.node.init.type ===\n                              `TaggedTemplateExpression`\n                          ) {\n                            varPath.traverse({\n                              TaggedTemplateExpression(templatePath) {\n                                found = true\n                                extractStaticQuery(templatePath)\n                              },\n                            })\n                          }\n                        },\n                      })\n                      if (!found) {\n                        warnForUnknownQueryVariable(\n                          varName,\n                          file,\n                          `<StaticQuery>`\n                        )\n                      }\n                    }\n                  },\n                })\n              },\n            })\n            return\n          },\n        })\n\n        // Look for queries in useStaticQuery hooks.\n        traverse(ast, {\n          CallExpression(hookPath) {\n            if (\n              hookPath.node.callee.name !== `useStaticQuery` ||\n              !hookPath.get(`callee`).referencesImport(`gatsby`)\n            ) {\n              return\n            }\n\n            const firstArg = hookPath.get(`arguments`)[0]\n\n            // Assume the query is inline in the component and extract that.\n            if (firstArg.isTaggedTemplateExpression()) {\n              extractStaticQuery(firstArg, true)\n              // Also see if it's a variable that's passed in as a prop\n              // and if it is, go find it.\n            } else if (firstArg.isIdentifier()) {\n              if (\n                firstArg.node.name !== `graphql` &&\n                firstArg.node.name !== `useStaticQuery`\n              ) {\n                const varName = firstArg.node.name\n                let found = false\n                traverse(ast, {\n                  VariableDeclarator(varPath) {\n                    if (\n                      varPath.node.id.name === varName &&\n                      varPath.node.init.type === `TaggedTemplateExpression`\n                    ) {\n                      varPath.traverse({\n                        TaggedTemplateExpression(templatePath) {\n                          found = true\n                          extractStaticQuery(templatePath, true)\n                        },\n                      })\n                    }\n                  },\n                })\n                if (!found) {\n                  warnForUnknownQueryVariable(varName, file, `useStaticQuery`)\n                }\n              }\n            }\n          },\n        })\n\n        // Look for exported page queries\n        traverse(ast, {\n          ExportNamedDeclaration(path, state) {\n            path.traverse({\n              TaggedTemplateExpression(innerPath) {\n                const { ast: gqlAst, isGlobal, hash, text } = getGraphQLTag(\n                  innerPath\n                )\n                if (!gqlAst) return\n\n                if (isGlobal) warnForGlobalTag(file)\n\n                gqlAst.definitions.forEach(def => {\n                  documentLocations.set(\n                    def,\n                    `${innerPath.node.start}-${def.loc.start}`\n                  )\n                  generateQueryName({\n                    def,\n                    hash,\n                    file,\n                  })\n                })\n\n                queries.push(\n                  ...gqlAst.definitions.map(d => {\n                    d.text = text\n\n                    innerPath.traverse({\n                      TemplateElement(templateElementPath) {\n                        d.templateLoc = templateElementPath.node.loc\n                      },\n                    })\n\n                    return d\n                  })\n                )\n              },\n            })\n          },\n        })\n\n        // Remove duplicate queries\n        const uniqueQueries = _.uniqBy(queries, q => documentLocations.get(q))\n\n        resolve(uniqueQueries)\n      })\n      .catch(reject)\n  })\n}\n\nconst cache = {}\n\nexport default class FileParser {\n  constructor({ parentSpan } = {}) {\n    this.parentSpan = parentSpan\n  }\n\n  async parseFile(file: string, addError): Promise<?DocumentNode> {\n    let text\n    try {\n      text = await fs.readFile(file, `utf8`)\n    } catch (err) {\n      addError({\n        id: `85913`,\n        filePath: file,\n        context: {\n          filePath: file,\n        },\n        error: err,\n      })\n\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n\n    if (text.indexOf(`graphql`) === -1) return null\n    const hash = crypto\n      .createHash(`md5`)\n      .update(file)\n      .update(text)\n      .digest(`hex`)\n\n    try {\n      let astDefinitions =\n        cache[hash] ||\n        (cache[hash] = await findGraphQLTags(file, text, {\n          parentSpan: this.parentSpan,\n          addError,\n        }))\n\n      // If any AST definitions were extracted, report success.\n      // This can mean there is none or there was a babel error when\n      // we tried to extract the graphql AST.\n      if (astDefinitions.length > 0) {\n        boundActionCreators.queryExtractedBabelSuccess({\n          componentPath: file,\n        })\n      }\n\n      return astDefinitions.length\n        ? {\n            kind: `Document`,\n            definitions: astDefinitions,\n          }\n        : null\n    } catch (err) {\n      // default error\n      let structuredError = {\n        id: `85915`,\n        context: {\n          filePath: file,\n        },\n      }\n\n      if (err instanceof StringInterpolationNotAllowedError) {\n        const location = {\n          start: err.interpolationStart,\n          end: err.interpolationEnd,\n        }\n        structuredError = {\n          id: `85916`,\n          location,\n          context: {\n            codeFrame: codeFrameColumns(text, location, {\n              highlightCode: process.env.FORCE_COLOR !== `0`,\n            }),\n          },\n        }\n      } else if (err instanceof EmptyGraphQLTagError) {\n        const location = err.templateLoc\n          ? {\n              start: err.templateLoc.start,\n              end: err.templateLoc.end,\n            }\n          : null\n\n        structuredError = {\n          id: `85917`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                })\n              : null,\n          },\n        }\n      } else if (err instanceof GraphQLSyntaxError) {\n        const location = {\n          start: locInGraphQlToLocInFile(\n            err.templateLoc,\n            err.originalError.locations[0]\n          ),\n        }\n\n        structuredError = {\n          id: `85918`,\n          location,\n          context: {\n            codeFrame: location\n              ? codeFrameColumns(text, location, {\n                  highlightCode: process.env.FORCE_COLOR !== `0`,\n                  message: err.originalError.message,\n                })\n              : null,\n            sourceMessage: err.originalError.message,\n          },\n        }\n      }\n\n      addError({\n        ...structuredError,\n        filePath: file,\n      })\n\n      boundActionCreators.queryExtractionGraphQLError({\n        componentPath: file,\n      })\n      return null\n    }\n  }\n\n  async parseFiles(\n    files: Array<string>,\n    addError\n  ): Promise<Map<string, DocumentNode>> {\n    const documents = new Map()\n\n    return Promise.all(\n      files.map(file =>\n        this.parseFile(file, addError).then(doc => {\n          if (!doc) return\n          documents.set(file, doc)\n        })\n      )\n    ).then(() => documents)\n  }\n}\n"],"file":"file-parser.js"}