{"version":3,"sources":["../../src/db/nodes-query.js"],"names":["require","getQueryFields","hasFieldResolvers","lokiRunQuery","siftRunQuery","chooseQueryEngine","args","backend","queryArgs","gqlType","filter","sort","group","distinct","fields","nodes","run","queryFunction","module","exports"],"mappings":";;iBAA8CA,OAAO,CAAE,gBAAF,C;MAA7CC,c,YAAAA,c;MAAgBC,iB,YAAAA,iB;;AAExB,MAAMC,YAAY,GAAGH,OAAO,CAAE,oBAAF,CAA5B;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAE,mBAAF,CAA5B;;AAEA,SAASK,iBAAT,CAA2BC,IAA3B,EAAiC;AAAA,oBACXN,OAAO,CAAE,SAAF,CADI;AAAA,QACvBO,OADuB,aACvBA,OADuB;;AAAA,QAGvBC,SAHuB,GAGAF,IAHA,CAGvBE,SAHuB;AAAA,QAGZC,OAHY,GAGAH,IAHA,CAGZG,OAHY;AAAA,QAIvBC,MAJuB,GAIWF,SAJX,CAIvBE,MAJuB;AAAA,QAIfC,IAJe,GAIWH,SAJX,CAIfG,IAJe;AAAA,QAITC,KAJS,GAIWJ,SAJX,CAITI,KAJS;AAAA,QAIFC,QAJE,GAIWL,SAJX,CAIFK,QAJE;AAK/B,QAAMC,MAAM,GAAGb,cAAc,CAAC;AAAES,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,GAAD,CAA7B,CAL+B,CAO/B;;AACA,MACEN,OAAO,KAAM,MAAb,IACA,CAACD,IAAI,CAACS,KADN,IAEA,CAACb,iBAAiB,CAACO,OAAD,EAAUK,MAAV,CAHpB,EAIE;AACA,WAAOX,YAAP;AACD,GAND,MAMO;AACL,WAAOC,YAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASY,GAAT,CAAaV,IAAb,EAAmB;AACjB,QAAMW,aAAa,GAAGZ,iBAAiB,CAACC,IAAD,CAAvC;AAEA,SAAOW,aAAa,CAACX,IAAD,CAApB;AACD;;AAEDY,MAAM,CAACC,OAAP,CAAeH,GAAf,GAAqBA,GAArB","sourcesContent":["const { getQueryFields, hasFieldResolvers } = require(`./common/query`)\n\nconst lokiRunQuery = require(`./loki/nodes-query`)\nconst siftRunQuery = require(`../redux/run-sift`)\n\nfunction chooseQueryEngine(args) {\n  const { backend } = require(`./nodes`)\n\n  const { queryArgs, gqlType } = args\n  const { filter, sort, group, distinct } = queryArgs\n  const fields = getQueryFields({ filter, sort, group, distinct })\n\n  // NOTE: `hasFieldResolvers` is also true for Date fields\n  if (\n    backend === `loki` &&\n    !args.nodes &&\n    !hasFieldResolvers(gqlType, fields)\n  ) {\n    return lokiRunQuery\n  } else {\n    return siftRunQuery\n  }\n}\n\n/**\n * Runs the query over all nodes of type. It must first select the\n * appropriate query engine. Sift, or Loki. Sift is used by default,\n * or if the query includes fields with custom resolver functions,\n * those that need to be resolved before being queried.\n * These could be either plugin fields, i.e those declared by plugins during\n * the `setFieldsOnGraphQLNodeType` API, or they could be linked fields.\n * See `../redux/run-sift.js` for more.\n *\n * If the query does *not* include fields with custom resolver functions,\n * and environment variable `GATSBY_DB_NODES` = `loki` then we can perform\n * a much faster pure data query using loki. See `loki/nodes-query.js` for\n * more.\n *\n * @param {Object} args. Object with:\n *\n * {Object} gqlType: built during `./build-node-types.js`\n *\n * {Object} queryArgs: The raw graphql query as a js object. E.g `{\n * filter: { fields { slug: { eq: \"/somepath\" } } } }`\n *\n * {Object} context: The context from the QueryJob\n *\n * {boolean} firstOnly: Whether to return the first found match, or\n * all matching result.\n *\n * @returns {promise} A promise that will eventually be resolved with\n * a collection of matching objects (even if `firstOnly` is true, in\n * which case it will be a collection of length 1 or zero)\n */\nfunction run(args) {\n  const queryFunction = chooseQueryEngine(args)\n\n  return queryFunction(args)\n}\n\nmodule.exports.run = run\n"],"file":"nodes-query.js"}