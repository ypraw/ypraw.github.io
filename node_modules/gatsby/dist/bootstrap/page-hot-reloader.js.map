{"version":3,"sources":["../../src/bootstrap/page-hot-reloader.js"],"names":["require","emitter","store","apiRunnerNode","boundActionCreators","deletePage","deleteComponentsDependencies","pagesDirty","graphql","on","action","payload","internal","type","runCreatePages","timestamp","Date","now","traceId","waitForCascadingActions","Array","from","getState","pages","values","forEach","page","isCreatedByStatefulCreatePages","updatedAt","path","emit","module","exports","graphqlRunner"],"mappings":";;;;;;iBAA2BA,OAAO,CAAE,UAAF,C;MAA1BC,O,YAAAA,O;MAASC,K,YAAAA,K;;AACjB,MAAMC,aAAa,GAAGH,OAAO,CAAE,0BAAF,CAA7B;;kBACgCA,OAAO,CAAE,kBAAF,C;MAA/BI,mB,aAAAA,mB;;MACAC,U,GAA6CD,mB,CAA7CC,U;MAAYC,4B,GAAiCF,mB,CAAjCE,4B;AAEpB,IAAIC,UAAU,GAAG,KAAjB;AACA,IAAIC,OAAJ;AAEAP,OAAO,CAACQ,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClC,MAAIA,MAAM,CAACC,OAAP,CAAeC,QAAf,CAAwBC,IAAxB,KAAkC,UAAtC,EAAiD;AAC/CN,IAAAA,UAAU,GAAG,IAAb;AACD;AACF,CAJD;AAKAN,OAAO,CAACQ,EAAR,CAAY,aAAZ,EAA0BC,MAAM,IAAI;AAClC,MAAIA,MAAM,CAACC,OAAP,CAAeC,QAAf,CAAwBC,IAAxB,KAAkC,UAAtC,EAAiD;AAC/CN,IAAAA,UAAU,GAAG,IAAb,CAD+C,CAE/C;AACA;AACA;AACA;;AACAJ,IAAAA,aAAa,CAAE,eAAF,CAAb;AACD;AACF,CATD;AAWAF,OAAO,CAACQ,EAAR,CAAY,yBAAZ,EAAsC,MAAM;AAC1C,MAAIF,UAAJ,EAAgB;AACdO,IAAAA,cAAc;AACf;AACF,CAJD;;AAMA,MAAMA,cAAc;AAAA;AAAA;AAAA,6CAAG,aAAY;AACjCP,IAAAA,UAAU,GAAG,KAAb;AAEA,UAAMQ,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AAEA,UAAMd,aAAa,CAAE,aAAF,EAAgB;AACjCK,MAAAA,OADiC;AAEjCU,MAAAA,OAAO,EAAG,aAFuB;AAGjCC,MAAAA,uBAAuB,EAAE;AAHQ,KAAhB,CAAnB,CALiC,CAWjC;;AACAC,IAAAA,KAAK,CAACC,IAAN,CAAWnB,KAAK,CAACoB,QAAN,GAAiBC,KAAjB,CAAuBC,MAAvB,EAAX,EAA4CC,OAA5C,CAAoDC,IAAI,IAAI;AAC1D,UACE,CAACA,IAAI,CAACC,8BAAN,IACAD,IAAI,CAACE,SAAL,GAAiBb,SADjB,IAEAW,IAAI,CAACG,IAAL,KAAe,WAHjB,EAIE;AACAvB,QAAAA,4BAA4B,CAAC,CAACoB,IAAI,CAACG,IAAN,CAAD,CAA5B;AACAxB,QAAAA,UAAU,CAACqB,IAAD,CAAV;AACD;AACF,KATD;AAWAzB,IAAAA,OAAO,CAAC6B,IAAR,CAAc,iBAAd;AACD,GAxBmB;;AAAA,kBAAdhB,cAAc;AAAA;AAAA;AAAA,GAApB;;AA0BAiB,MAAM,CAACC,OAAP,GAAiBC,aAAa,IAAI;AAChCzB,EAAAA,OAAO,GAAGyB,aAAV;AACD,CAFD","sourcesContent":["const { emitter, store } = require(`../redux`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { boundActionCreators } = require(`../redux/actions`)\nconst { deletePage, deleteComponentsDependencies } = boundActionCreators\n\nlet pagesDirty = false\nlet graphql\n\nemitter.on(`CREATE_NODE`, action => {\n  if (action.payload.internal.type !== `SitePage`) {\n    pagesDirty = true\n  }\n})\nemitter.on(`DELETE_NODE`, action => {\n  if (action.payload.internal.type !== `SitePage`) {\n    pagesDirty = true\n    // Make a fake API call to trigger `API_RUNNING_QUEUE_EMPTY` being called.\n    // We don't want to call runCreatePages here as there might be work in\n    // progress. So this is a safe way to make sure runCreatePages gets called\n    // at a safe time.\n    apiRunnerNode(`FAKE_API_CALL`)\n  }\n})\n\nemitter.on(`API_RUNNING_QUEUE_EMPTY`, () => {\n  if (pagesDirty) {\n    runCreatePages()\n  }\n})\n\nconst runCreatePages = async () => {\n  pagesDirty = false\n\n  const timestamp = Date.now()\n\n  await apiRunnerNode(`createPages`, {\n    graphql,\n    traceId: `createPages`,\n    waitForCascadingActions: true,\n  })\n\n  // Delete pages that weren't updated when running createPages.\n  Array.from(store.getState().pages.values()).forEach(page => {\n    if (\n      !page.isCreatedByStatefulCreatePages &&\n      page.updatedAt < timestamp &&\n      page.path !== `/404.html`\n    ) {\n      deleteComponentsDependencies([page.path])\n      deletePage(page)\n    }\n  })\n\n  emitter.emit(`CREATE_PAGE_END`)\n}\n\nmodule.exports = graphqlRunner => {\n  graphql = graphqlRunner\n}\n"],"file":"page-hot-reloader.js"}