{"version":3,"sources":["../../src/bootstrap/schema-hot-reloader.js"],"names":["debounce","cloneDeep","require","emitter","store","rebuild","haveEqualFields","updateStateAndRunQueries","report","inferredTypesChanged","inferenceMetadata","prevInferenceMetadata","Object","keys","filter","type","dirty","length","schemaChanged","schemaCustomization","lastSchemaCustomization","some","key","lastMetadata","maybeRebuildSchema","getState","activity","activityTimer","start","parentSpan","end","module","exports","on"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAA0BC,OAAO,CAAE,QAAF,CAAvC;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAqBF,OAAO,CAAE,UAAF,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAE,WAAF,CAA3B;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAE,oCAAF,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAA+BL,OAAO,CAAE,wBAAF,CAA5C;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAE,yBAAF,CAAtB;;AAEA,MAAMO,oBAAoB,GAAG,CAACC,iBAAD,EAAoBC,qBAApB,KAC3BC,MAAM,CAACC,IAAP,CAAYH,iBAAZ,EAA+BI,MAA/B,CACEC,IAAI,IACFL,iBAAiB,CAACK,IAAD,CAAjB,CAAwBC,KAAxB,IACA,CAACV,eAAe,CAACI,iBAAiB,CAACK,IAAD,CAAlB,EAA0BJ,qBAAqB,CAACI,IAAD,CAA/C,CAHpB,EAIEE,MAJF,GAIW,CALb;;AAOA,MAAMC,aAAa,GAAG,CAACC,mBAAD,EAAsBC,uBAAtB,KACpB,CAAE,iBAAF,EAAqB,aAArB,EAAoC,mBAApC,EAAyD,OAAzD,EAAiEC,IAAjE,CACEC,GAAG,IAAIH,mBAAmB,CAACG,GAAD,CAAnB,KAA6BF,uBAAuB,CAACE,GAAD,CAD7D,CADF;;AAKA,IAAIC,YAAJ;AACA,IAAIH,uBAAJ,C,CAEA;AACA;;AACA,MAAMI,kBAAkB,GAAGxB,QAAQ,CAAC,YAAY;AAC9C,QAAM;AAAEU,IAAAA,iBAAF;AAAqBS,IAAAA;AAArB,MAA6Cf,KAAK,CAACqB,QAAN,EAAnD;;AAEA,MACE,CAAChB,oBAAoB,CAACC,iBAAD,EAAoBa,YAApB,CAArB,IACA,CAACL,aAAa,CAACC,mBAAD,EAAsBC,uBAAtB,CAFhB,EAGE;AACA;AACD;;AAED,QAAMM,QAAQ,GAAGlB,MAAM,CAACmB,aAAP,CAAsB,gBAAtB,CAAjB;AACAD,EAAAA,QAAQ,CAACE,KAAT;AACAL,EAAAA,YAAY,GAAGtB,SAAS,CAACS,iBAAD,CAAxB;AACAU,EAAAA,uBAAuB,GAAGD,mBAA1B;AACA,QAAMd,OAAO,CAAC;AAAEwB,IAAAA,UAAU,EAAEH;AAAd,GAAD,CAAb;AACA,QAAMnB,wBAAwB,CAAC,KAAD,EAAQ;AAAEsB,IAAAA,UAAU,EAAEH;AAAd,GAAR,CAA9B;AACAA,EAAAA,QAAQ,CAACI,GAAT;AACD,CAjBkC,EAiBhC,IAjBgC,CAAnC;;AAmBAC,MAAM,CAACC,OAAP,GAAiB,MAAM;AACrB,QAAM;AAAEtB,IAAAA,iBAAF;AAAqBS,IAAAA;AAArB,MAA6Cf,KAAK,CAACqB,QAAN,EAAnD;AACAF,EAAAA,YAAY,GAAGtB,SAAS,CAACS,iBAAD,CAAxB;AACAU,EAAAA,uBAAuB,GAAGD,mBAA1B;AACAhB,EAAAA,OAAO,CAAC8B,EAAR,CAAY,yBAAZ,EAAsCT,kBAAtC;AACD,CALD","sourcesContent":["const { debounce, cloneDeep } = require(`lodash`)\nconst { emitter, store } = require(`../redux`)\nconst { rebuild } = require(`../schema`)\nconst { haveEqualFields } = require(`../schema/infer/inference-metadata`)\nconst { updateStateAndRunQueries } = require(`../query/query-watcher`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nconst inferredTypesChanged = (inferenceMetadata, prevInferenceMetadata) =>\n  Object.keys(inferenceMetadata).filter(\n    type =>\n      inferenceMetadata[type].dirty &&\n      !haveEqualFields(inferenceMetadata[type], prevInferenceMetadata[type])\n  ).length > 0\n\nconst schemaChanged = (schemaCustomization, lastSchemaCustomization) =>\n  [`fieldExtensions`, `printConfig`, `thirdPartySchemas`, `types`].some(\n    key => schemaCustomization[key] !== lastSchemaCustomization[key]\n  )\n\nlet lastMetadata\nlet lastSchemaCustomization\n\n// API_RUNNING_QUEUE_EMPTY could be emitted multiple types\n// in a short period of time, so debounce seems reasonable\nconst maybeRebuildSchema = debounce(async () => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n\n  if (\n    !inferredTypesChanged(inferenceMetadata, lastMetadata) &&\n    !schemaChanged(schemaCustomization, lastSchemaCustomization)\n  ) {\n    return\n  }\n\n  const activity = report.activityTimer(`rebuild schema`)\n  activity.start()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  await rebuild({ parentSpan: activity })\n  await updateStateAndRunQueries(false, { parentSpan: activity })\n  activity.end()\n}, 1000)\n\nmodule.exports = () => {\n  const { inferenceMetadata, schemaCustomization } = store.getState()\n  lastMetadata = cloneDeep(inferenceMetadata)\n  lastSchemaCustomization = schemaCustomization\n  emitter.on(`API_RUNNING_QUEUE_EMPTY`, maybeRebuildSchema)\n}\n"],"file":"schema-hot-reloader.js"}