{"version":3,"sources":["../../src/bootstrap/requires-writer.js"],"names":["_","require","fs","crypto","store","emitter","lastHash","resetLastHash","pickComponentFields","page","pick","getComponents","pages","map","uniqBy","c","componentChunkName","value","pickMatchPathFields","getMatchPaths","filter","matchPath","createHash","matchPaths","components","update","JSON","stringify","digest","writeAll","state","program","values","newHash","Promise","resolve","syncRequires","component","join","asyncRequires","writeAndMove","file","data","destination","directory","tmp","Date","now","writeFile","then","move","overwrite","result","all","debouncedWriteAll","debounce","getState","leading","startListener","on","module","exports"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fs = require(`fs-extra`)\nconst crypto = require(`crypto`)\nconst { store, emitter } = require(`../redux/`)\nimport { joinPath } from \"../utils/path\"\n\nlet lastHash = null\n\nconst resetLastHash = () => {\n  lastHash = null\n}\n\nconst pickComponentFields = page =>\n  _.pick(page, [`component`, `componentChunkName`])\n\nconst getComponents = pages =>\n  _(pages)\n    .map(pickComponentFields)\n    .uniqBy(c => c.componentChunkName)\n    .value()\n\nconst pickMatchPathFields = page => _.pick(page, [`path`, `matchPath`])\n\nconst getMatchPaths = pages =>\n  pages.filter(page => page.matchPath).map(pickMatchPathFields)\n\nconst createHash = (matchPaths, components) =>\n  crypto\n    .createHash(`md5`)\n    .update(JSON.stringify({ matchPaths, components }))\n    .digest(`hex`)\n\n// Write out pages information.\nconst writeAll = async state => {\n  const { program } = state\n  const pages = [...state.pages.values()]\n  const matchPaths = getMatchPaths(pages)\n  const components = getComponents(pages)\n\n  const newHash = createHash(matchPaths, components)\n\n  if (newHash === lastHash) {\n    // Nothing changed. No need to rewrite files\n    return Promise.resolve()\n  }\n\n  lastHash = newHash\n\n  // Create file with sync requires of components/json files.\n  let syncRequires = `const { hot } = require(\"react-hot-loader/root\")\n\n// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n\\n`\n  syncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": hot(preferDefault(require(\"${joinPath(\n          c.component\n        )}\")))`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  // Create file with async requires of components/json files.\n  let asyncRequires = `// prefer default export if available\nconst preferDefault = m => m && m.default || m\n\\n`\n  asyncRequires += `exports.components = {\\n${components\n    .map(\n      c =>\n        `  \"${c.componentChunkName}\": () => import(\"${joinPath(\n          c.component\n        )}\" /* webpackChunkName: \"${c.componentChunkName}\" */)`\n    )\n    .join(`,\\n`)}\n}\\n\\n`\n\n  const writeAndMove = (file, data) => {\n    const destination = joinPath(program.directory, `.cache`, file)\n    const tmp = `${destination}.${Date.now()}`\n    return fs\n      .writeFile(tmp, data)\n      .then(() => fs.move(tmp, destination, { overwrite: true }))\n  }\n\n  const result = await Promise.all([\n    writeAndMove(`sync-requires.js`, syncRequires),\n    writeAndMove(`async-requires.js`, asyncRequires),\n    writeAndMove(`match-paths.json`, JSON.stringify(matchPaths, null, 4)),\n  ])\n\n  return result\n}\n\nconst debouncedWriteAll = _.debounce(() => writeAll(store.getState()), 500, {\n  leading: true,\n})\n\n/**\n * Start listening to CREATE/DELETE_PAGE events so we can rewrite\n * files as required\n */\nconst startListener = () => {\n  emitter.on(`CREATE_PAGE`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`CREATE_PAGE_END`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`DELETE_PAGE`, () => {\n    debouncedWriteAll()\n  })\n\n  emitter.on(`DELETE_PAGE_BY_PATH`, () => {\n    debouncedWriteAll()\n  })\n}\n\nmodule.exports = {\n  writeAll,\n  resetLastHash,\n  startListener,\n}\n"],"file":"requires-writer.js"}