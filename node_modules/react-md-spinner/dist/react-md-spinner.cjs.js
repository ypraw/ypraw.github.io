/*! @preserve react-md-spinner v1.0.0 - tsuyoshiwada | MIT license. */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var Stylis = _interopDefault(require('stylis'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var STYLE_DATA_NAME = "react-md-spinner";

var KEYFRAME_PREFIX = "__react-md-spinner-animation__";
var stylis = new Stylis({
  global: false,
  cascade: true,
  keyframe: true,
  prefix: true,
  compress: false
});
var Keyframe = {
  ROOT_ROTATE: "".concat(KEYFRAME_PREFIX, "root-rotate"),
  FILL_UNFILL_ROTATE: "".concat(KEYFRAME_PREFIX, "fill-unfill-rotate"),
  LAYER_1_FADE_IN_OUT: "".concat(KEYFRAME_PREFIX, "layer-1-fade-in-out"),
  LAYER_2_FADE_IN_OUT: "".concat(KEYFRAME_PREFIX, "layer-2-fade-in-out"),
  LAYER_3_FADE_IN_OUT: "".concat(KEYFRAME_PREFIX, "layer-3-fade-in-out"),
  LAYER_4_FADE_IN_OUT: "".concat(KEYFRAME_PREFIX, "layer-4-fade-in-out"),
  LEFT_SPIN: "".concat(KEYFRAME_PREFIX, "left-spin"),
  RIGHT_SPIN: "".concat(KEYFRAME_PREFIX, "right-spin")
};
var keyframes = stylis("", "\n@keyframes ".concat(Keyframe.ROOT_ROTATE, " {\n  to { transform: rotate(360deg); }\n}\n\n@keyframes ").concat(Keyframe.FILL_UNFILL_ROTATE, " {\n  12.5% { transform: rotate(135deg) }\n  25% { transform: rotate(270deg) }\n  37.5% { transform: rotate(405deg) }\n  50% { transform: rotate(540deg) }\n  62.5% { transform: rotate(675deg) }\n  75% { transform: rotate(810deg) }\n  87.5% { transform: rotate(945deg) }\n  100% { transform: rotate(1080deg) }\n}\n\n@keyframes ").concat(Keyframe.LAYER_1_FADE_IN_OUT, " {\n  0% { opacity: 1 }\n  25% { opacity: 1 }\n  26% { opacity: 0 }\n  89% { opacity: 0 }\n  90% { opacity: 1 }\n  100% { opacity: 1 }\n}\n\n@keyframes ").concat(Keyframe.LAYER_2_FADE_IN_OUT, " {\n  0% { opacity: 0 }\n  15% { opacity: 0 }\n  25% { opacity: 1 }\n  50% { opacity: 1 }\n  51% { opacity: 0 }\n  100% { opacity: 0 }\n}\n\n@keyframes ").concat(Keyframe.LAYER_3_FADE_IN_OUT, " {\n  0% { opacity: 0 }\n  40% { opacity: 0 }\n  50% { opacity: 1 }\n  75% { opacity: 1 }\n  76% { opacity: 0 }\n  100% { opacity: 0 }\n}\n\n@keyframes ").concat(Keyframe.LAYER_4_FADE_IN_OUT, " {\n  0% { opacity: 0 }\n  65% { opacity: 0 }\n  75% { opacity: 1 }\n  90% { opacity: 1 }\n  100% { opacity: 0 }\n}\n\n@keyframes ").concat(Keyframe.LEFT_SPIN, " {\n  0% { transform: rotate(130deg) }\n  50% { transform: rotate(-5deg) }\n  100% { transform: rotate(130deg) }\n}\n\n@keyframes ").concat(Keyframe.RIGHT_SPIN, " {\n  0% { transform: rotate(-130deg) }\n  50% { transform: rotate(5deg) }\n  100% { transform: rotate(-130deg) }\n}\n"));

var getStylesheetString = function getStylesheetString() {
  return "<style type=\"text/css\" data-".concat(STYLE_DATA_NAME, "=\"\">").concat(keyframes, "</style>");
};
var getStylesheetComponent = function getStylesheetComponent() {
  var _React$createElement;

  return React.createElement("style", (_React$createElement = {
    type: "text/css"
  }, _defineProperty(_React$createElement, "data-".concat(STYLE_DATA_NAME), ""), _defineProperty(_React$createElement, "dangerouslySetInnerHTML", {
    __html: keyframes
  }), _React$createElement));
};

var ssrBehavior = /*#__PURE__*/Object.freeze({
  getStylesheetString: getStylesheetString,
  getStylesheetComponent: getStylesheetComponent
});

var getColors = function getColors(props) {
  var singleColor = props.singleColor,
      color1 = props.color1,
      color2 = props.color2,
      color3 = props.color3,
      color4 = props.color4;
  return singleColor ? [singleColor, singleColor, singleColor, singleColor] : [color1, color2, color3, color4];
};

var getStyles = function getStyles(props) {
  var size = props.size;
  var duration = props.duration;
  var borderSize = props.borderSize;
  var borderWidth = borderSize || Math.max(1, Math.round(size * 0.107142));
  var colors = getColors(props);
  var arcSize = 270;
  var arcStartRotate = 216;
  var rootDuration = 360 * duration / (arcStartRotate + (360 - arcSize));
  var rootStyle = {
    display: "inline-block",
    position: "relative",
    width: size,
    height: size,
    verticalAlign: "middle",
    fontSize: "0",
    animation: "".concat(Keyframe.ROOT_ROTATE, " ").concat(rootDuration, "ms linear infinite"),
    WebkitAnimation: "".concat(Keyframe.ROOT_ROTATE, " ").concat(rootDuration, "ms linear infinite")
  };
  var layerStyles = colors.map(function (color, i) {
    return {
      boxSizing: "border-box",
      display: "block",
      position: "absolute",
      width: "100%",
      height: "100%",
      borderColor: color,
      whiteSpace: "nowrap",
      opacity: 1,
      animationName: "".concat(Keyframe.FILL_UNFILL_ROTATE, ", ").concat(Keyframe["LAYER_".concat(i + 1, "_FADE_IN_OUT")]),
      WebkitAnimationName: "".concat(Keyframe.FILL_UNFILL_ROTATE, ", ").concat(Keyframe["LAYER_".concat(i + 1, "_FADE_IN_OUT")]),
      animationDuration: "".concat(duration * colors.length, "ms"),
      WebkitAnimationDuration: "".concat(duration * colors.length, "ms"),
      animationTimingFunction: "cubic-bezier(.4, 0, .2, 1)",
      WebkitAnimationTimingFunction: "cubic-bezier(.4, 0, .2, 1)",
      animationIterationCount: "infinite",
      WebkitAnimationIterationCount: "infinite"
    };
  });
  var clipStyle = {
    display: "inline-block",
    boxSizing: "border-box",
    position: "relative",
    width: "50%",
    height: "100%",
    overflow: "hidden",
    borderColor: "inherit"
  };
  var layerClipAfterStyle = {
    display: "inline-block",
    boxSizing: "border-box",
    position: "absolute",
    top: 0,
    borderRadius: "50%"
  };

  var layerAfterStyle = _objectSpread({}, layerClipAfterStyle, {
    left: "45%",
    width: "10%",
    borderWidth: borderWidth,
    borderColor: "inherit",
    borderTopStyle: "solid"
  });

  var clipAfterStyle = _objectSpread({}, layerClipAfterStyle, {
    bottom: 0,
    width: "200%",
    borderWidth: borderWidth,
    borderStyle: "solid",
    animationDuration: "".concat(duration, "ms"),
    WebkitAnimationDuration: "".concat(duration, "ms"),
    animationTimingFunction: "cubic-bezier(.4, 0, .2, 1)",
    WebkitAnimationTimingFunction: "cubic-bezier(.4, 0, .2, 1)",
    animationIterationCount: "infinite",
    WebkitAnimationIterationCount: "infinite"
  });

  var clip1AfterStyle = _objectSpread({}, clipAfterStyle, {
    left: 0,
    transform: "rotate(129deg)",
    WebkitTransform: "rotate(129deg)",
    animationName: Keyframe.LEFT_SPIN,
    WebkitAnimationName: Keyframe.LEFT_SPIN
  });

  var clip1AfterStyles = colors.map(function (color) {
    return _objectSpread({}, clip1AfterStyle, {
      borderColor: "".concat(color, " transparent transparent ").concat(color)
    });
  });

  var clip2AfterStyle = _objectSpread({}, clipAfterStyle, {
    left: "-100%",
    transform: "rotate(-129deg)",
    WebkitTransform: "rotate(-129deg)",
    animationName: Keyframe.RIGHT_SPIN,
    WebkitAnimationName: Keyframe.RIGHT_SPIN
  });

  var clip2AfterStyles = colors.map(function (color) {
    return _objectSpread({}, clip2AfterStyle, {
      borderColor: "".concat(color, " ").concat(color, " transparent transparent")
    });
  });
  return {
    rootStyle: rootStyle,
    layerStyles: layerStyles,
    layerAfterStyle: layerAfterStyle,
    clipStyle: clipStyle,
    clip1AfterStyles: clip1AfterStyles,
    clip2AfterStyles: clip2AfterStyles
  };
};

var injectStyles = function injectStyles(name, rules) {
  var el = document.createElement("style");
  el.type = "text/css";
  el.setAttribute("data-".concat(name), "");
  el.innerHTML = rules;
  document.head.appendChild(el);
};
var uninjectStyles = function uninjectStyles(name) {
  var el = document.querySelector("[data-".concat(name, "]"));

  if (el != null && el.parentNode != null) {
    el.parentNode.removeChild(el);
  }
};

var MDSpinner =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(MDSpinner, _React$PureComponent);

  function MDSpinner() {
    _classCallCheck(this, MDSpinner);

    return _possibleConstructorReturn(this, _getPrototypeOf(MDSpinner).apply(this, arguments));
  }

  _createClass(MDSpinner, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (MDSpinner.mountedInstanceCount < 1) {
        injectStyles(STYLE_DATA_NAME, keyframes);
      }

      MDSpinner.mountedInstanceCount++;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      MDSpinner.mountedInstanceCount = Math.max(0, MDSpinner.mountedInstanceCount - 1);

      if (MDSpinner.mountedInstanceCount < 1) {
        uninjectStyles(STYLE_DATA_NAME);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _singleColor = _this$props.singleColor,
          _size = _this$props.size,
          _borderSize = _this$props.borderSize,
          _duration = _this$props.duration,
          _color1 = _this$props.color1,
          _color2 = _this$props.color2,
          _color3 = _this$props.color3,
          _color4 = _this$props.color4,
          rest = _objectWithoutProperties(_this$props, ["singleColor", "size", "borderSize", "duration", "color1", "color2", "color3", "color4"]);

      var _getStyles = getStyles(this.props),
          rootStyle = _getStyles.rootStyle,
          layerStyles = _getStyles.layerStyles,
          layerAfterStyle = _getStyles.layerAfterStyle,
          clipStyle = _getStyles.clipStyle,
          clip1AfterStyles = _getStyles.clip1AfterStyles,
          clip2AfterStyles = _getStyles.clip2AfterStyles;

      var layers = [];

      for (var i = 0; i < 4; i++) {
        layers.push(React.createElement("span", {
          key: i,
          style: layerStyles[i]
        }, React.createElement("span", {
          style: clipStyle
        }, React.createElement("span", {
          style: clip1AfterStyles[i]
        })), React.createElement("span", {
          style: clipStyle
        }, React.createElement("span", {
          style: clip2AfterStyles[i]
        })), React.createElement("span", {
          style: layerAfterStyle
        })));
      }

      return React.createElement("span", _extends({}, rest, {
        style: _objectSpread({}, rootStyle, rest.style != null ? rest.style : {})
      }), layers);
    }
  }]);

  return MDSpinner;
}(React.PureComponent);

_defineProperty(MDSpinner, "defaultProps", {
  size: 28,
  duration: 1333,
  color1: "rgb(66, 165, 245)",
  color2: "rgb(239, 83, 80)",
  color3: "rgb(253, 216, 53)",
  color4: "rgb(76, 175, 80)"
});

_defineProperty(MDSpinner, "mountedInstanceCount", 0);

exports.default = MDSpinner;
exports.ssrBehavior = ssrBehavior;
