"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This component allows developers to render output before main output from all the other components.
// The reason it's called <Static> is it's append-only output. Output from <Static> components
// is written permantently to stdout and is never updated afterwards. If <Static> component
// receives new children, Ink will detect the changes and write them to stdout.
// In order for this mechanism to work perfectly, <Static> children must never update their output
// once they've been appended to <Static>.
//
// A good example of where this component might be useful is interface like Jest's.
// When running tests, Jest keeps writing completed tests to output, while continuously
// rendering test stats at the end of the output.
class Static extends _react.Component {
  constructor() {
    super();
    this.state = {
      ignoreKeys: []
    };
  }

  render() {
    const _this$props = this.props,
          {
      children
    } = _this$props,
          otherProps = _objectWithoutProperties(_this$props, ["children"]);

    const newChildren = _react.default.Children.toArray(children).filter(child => {
      return !this.state.ignoreKeys.includes(child.key);
    });

    return _react.default.createElement("div", {
      unstable__static: true,
      style: otherProps
    }, newChildren);
  }

  componentDidMount() {
    this.saveRenderedKeys();
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.ignoreKeys === this.state.ignoreKeys) {
      this.saveRenderedKeys();
    }
  }

  saveRenderedKeys() {
    this.setState(prevState => {
      const newKeys = _react.default.Children.toArray(this.props.children).map(child => child.key).filter(key => !prevState.ignoreKeys.includes(key));

      return {
        ignoreKeys: [...prevState.ignoreKeys, ...newKeys]
      };
    });
  }

}

exports.default = Static;

_defineProperty(Static, "propTypes", {
  children: _propTypes.default.node
});