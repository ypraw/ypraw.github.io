"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiscussionEmbed = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var callbacks = ['preData', 'preInit', 'onInit', 'onReady', 'afterRender', 'preReset', 'onIdentify', 'beforeComment', 'onNewComment', 'onPaginate'];

var DiscussionEmbed = /*#__PURE__*/function (_React$Component) {
  _inherits(DiscussionEmbed, _React$Component);

  var _super = _createSuper(DiscussionEmbed);

  function DiscussionEmbed() {
    _classCallCheck(this, DiscussionEmbed);

    return _super.apply(this, arguments);
  }

  _createClass(DiscussionEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window !== 'undefined' && window.disqus_shortname && window.disqus_shortname !== this.props.shortname) this.cleanInstance();
      this.loadInstance();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      if (this.props === nextProps) return false;
      return (0, _utils.shallowComparison)(this.props, nextProps);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(nextProps) {
      if (this.props.shortname !== nextProps.shortname) this.cleanInstance();
      this.loadInstance();
    }
  }, {
    key: "loadInstance",
    value: function loadInstance() {
      var doc = window.document;

      if (window && window.DISQUS && doc.getElementById('dsq-embed-scr')) {
        window.DISQUS.reset({
          reload: true,
          config: this.getDisqusConfig(this.props.config)
        });
      } else {
        window.disqus_config = this.getDisqusConfig(this.props.config);
        window.disqus_shortname = this.props.shortname;
        (0, _utils.insertScript)("https://".concat(this.props.shortname, ".disqus.com/embed.js"), 'dsq-embed-scr', doc.body);
      }
    }
  }, {
    key: "cleanInstance",
    value: function cleanInstance() {
      var doc = window.document;
      (0, _utils.removeScript)('dsq-embed-scr', doc.body);
      if (window && window.DISQUS) window.DISQUS.reset({});

      try {
        delete window.DISQUS;
      } catch (error) {
        window.DISQUS = undefined;
      }

      var disqusThread = doc.getElementById('disqus_thread');

      if (disqusThread) {
        while (disqusThread.hasChildNodes()) {
          disqusThread.removeChild(disqusThread.firstChild);
        }
      }
    }
  }, {
    key: "getDisqusConfig",
    value: function getDisqusConfig(config) {
      return function () {
        var _this = this;

        this.page.identifier = config.identifier;
        this.page.url = config.url;
        this.page.title = config.title;
        this.page.category_id = config.categoryID;
        this.page.remote_auth_s3 = config.remoteAuthS3;
        this.page.api_key = config.apiKey;
        if (config.language) this.language = config.language;
        callbacks.forEach(function (callbackName) {
          _this.callbacks[callbackName] = [config[callbackName]];
        });
      };
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement("div", _extends({}, this.props, {
        id: "disqus_thread"
      }));
    }
  }]);

  return DiscussionEmbed;
}(_react["default"].Component);

exports.DiscussionEmbed = DiscussionEmbed;
DiscussionEmbed.propTypes = {
  shortname: _propTypes["default"].string.isRequired,
  config: _propTypes["default"].shape({
    identifier: _propTypes["default"].string,
    url: _propTypes["default"].string,
    title: _propTypes["default"].string,
    language: _propTypes["default"].string,
    categoryID: _propTypes["default"].string,
    remoteAuthS3: _propTypes["default"].string,
    apiKey: _propTypes["default"].string,
    preData: _propTypes["default"].func,
    preInit: _propTypes["default"].func,
    onInit: _propTypes["default"].func,
    onReady: _propTypes["default"].func,
    afterRender: _propTypes["default"].func,
    preReset: _propTypes["default"].func,
    onIdentify: _propTypes["default"].func,
    beforeComment: _propTypes["default"].func,
    onNewComment: _propTypes["default"].func,
    onPaginate: _propTypes["default"].func
  }).isRequired
};