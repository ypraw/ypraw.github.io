var ReactDisqus =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.insertScript = insertScript;
exports.removeScript = removeScript;
exports.debounce = debounce;
exports.isReactElement = isReactElement;
exports.shallowComparison = shallowComparison;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function insertScript(src, id, parentElement) {
    var script = window.document.createElement('script');
    script.async = true;
    script.src = src;
    script.id = id;
    parentElement.appendChild(script);

    return script;
}

function removeScript(id, parentElement) {
    var script = window.document.getElementById(id);
    if (script) parentElement.removeChild(script);
}

function debounce(func, wait, runOnFirstCall) {
    var timeout = void 0;
    return function () {
        var context = this; // eslint-disable-line consistent-this
        var args = arguments;

        var deferredExecution = function deferredExecution() {
            timeout = null;
            if (!runOnFirstCall) func.apply(context, args);
        };

        var callNow = runOnFirstCall && !timeout;

        window.clearTimeout(timeout);
        timeout = setTimeout(deferredExecution, wait);

        if (callNow) func.apply(context, args);
    };
}

function isReactElement(element) {
    if (_react2.default.isValidElement(element)) {
        return true;
    } else if (Array.isArray(element)) {
        return element.some(function (value) {
            return _react2.default.isValidElement(value);
        });
    }
    return false;
}

function shallowComparison(currentProps, nextProps) {
    // Perform a comparison of all props, excluding React Elements, to prevent unnecessary updates
    var propNames = new Set(Object.keys(currentProps), Object.keys(nextProps)); // eslint-disable-line no-undef
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = propNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var name = _step.value;

            if (currentProps[name] !== nextProps[name] && !isReactElement(currentProps[name])) return true;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DiscussionEmbed = exports.CommentEmbed = exports.CommentCount = undefined;

var _CommentCount = __webpack_require__(3);

var _CommentEmbed = __webpack_require__(4);

var _DiscussionEmbed = __webpack_require__(5);

exports.CommentCount = _CommentCount.CommentCount;
exports.CommentEmbed = _CommentEmbed.CommentEmbed;
exports.DiscussionEmbed = _DiscussionEmbed.DiscussionEmbed;


var Disqus = {
    CommentCount: _CommentCount.CommentCount,
    CommentEmbed: _CommentEmbed.CommentEmbed,
    DiscussionEmbed: _DiscussionEmbed.DiscussionEmbed
};

exports.default = Disqus;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CommentCount = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var queueResetCount = (0, _utils.debounce)(function () {
    if (window.DISQUSWIDGETS) window.DISQUSWIDGETS.getCount({ reset: true });
}, 300, false); // eslint-disable-line no-magic-numbers

var CommentCount = exports.CommentCount = function (_React$Component) {
    _inherits(CommentCount, _React$Component);

    function CommentCount() {
        _classCallCheck(this, CommentCount);

        return _possibleConstructorReturn(this, (CommentCount.__proto__ || Object.getPrototypeOf(CommentCount)).apply(this, arguments));
    }

    _createClass(CommentCount, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.loadInstance();
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            if (this.props === nextProps) return false;
            return (0, _utils.shallowComparison)(this.props, nextProps);
        }
    }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps) {
            if (this.props.shortname !== nextProps.shortname) this.cleanInstance();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.loadInstance();
        }
    }, {
        key: 'loadInstance',
        value: function loadInstance() {
            var doc = window.document;
            if (doc.getElementById('dsq-count-scr')) queueResetCount();else (0, _utils.insertScript)('https://' + this.props.shortname + '.disqus.com/count.js', 'dsq-count-scr', doc.body);
        }
    }, {
        key: 'cleanInstance',
        value: function cleanInstance() {
            var body = window.document.body;
            (0, _utils.removeScript)('dsq-count-scr', body);

            // count.js only reassigns this window object if it's undefined.
            window.DISQUSWIDGETS = undefined;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'span',
                {
                    className: 'disqus-comment-count',
                    'data-disqus-identifier': this.props.config.identifier,
                    'data-disqus-url': this.props.config.url
                },
                this.props.children
            );
        }
    }]);

    return CommentCount;
}(_react2.default.Component);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CommentEmbed = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RADIX_BASE = 36;

var CommentEmbed = exports.CommentEmbed = function (_React$Component) {
    _inherits(CommentEmbed, _React$Component);

    function CommentEmbed() {
        _classCallCheck(this, CommentEmbed);

        return _possibleConstructorReturn(this, (CommentEmbed.__proto__ || Object.getPrototypeOf(CommentEmbed)).apply(this, arguments));
    }

    _createClass(CommentEmbed, [{
        key: 'getSrc',
        value: function getSrc() {
            var post = Number(this.props.commentId).toString(RADIX_BASE);
            var parentParam = this.props.showParentComment ? '1' : '0';
            var mediaParam = this.props.showMedia ? '1' : '0';

            return 'https://embed.disqus.com/p/' + post + '?p=' + parentParam + '&m=' + mediaParam;
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement('iframe', {
                src: this.getSrc(),
                width: this.props.width,
                height: this.props.height,
                seamless: 'seamless',
                scrolling: 'no',
                frameBorder: '0'
            });
        }
    }]);

    return CommentEmbed;
}(_react2.default.Component);

CommentEmbed.defaultProps = {
    showMedia: true,
    showParentComment: true,
    width: 420,
    height: 320
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DiscussionEmbed = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _utils = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DiscussionEmbed = exports.DiscussionEmbed = function (_React$Component) {
    _inherits(DiscussionEmbed, _React$Component);

    function DiscussionEmbed() {
        _classCallCheck(this, DiscussionEmbed);

        return _possibleConstructorReturn(this, (DiscussionEmbed.__proto__ || Object.getPrototypeOf(DiscussionEmbed)).apply(this, arguments));
    }

    _createClass(DiscussionEmbed, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            if (typeof window !== 'undefined' && window.disqus_shortname && window.disqus_shortname !== this.props.shortname) this.cleanInstance();
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.loadInstance();
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            if (this.props === nextProps) return false;
            return (0, _utils.shallowComparison)(this.props, nextProps);
        }
    }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps) {
            if (this.props.shortname !== nextProps.shortname) this.cleanInstance();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            this.loadInstance();
        }
    }, {
        key: 'loadInstance',
        value: function loadInstance() {
            var doc = window.document;
            if (window && window.DISQUS && doc.getElementById('dsq-embed-scr')) {
                window.DISQUS.reset({
                    reload: true,
                    config: this.getDisqusConfig(this.props.config)
                });
            } else {
                window.disqus_config = this.getDisqusConfig(this.props.config);
                window.disqus_shortname = this.props.shortname;
                (0, _utils.insertScript)('https://' + this.props.shortname + '.disqus.com/embed.js', 'dsq-embed-scr', doc.body);
            }
        }
    }, {
        key: 'cleanInstance',
        value: function cleanInstance() {
            var doc = window.document;
            (0, _utils.removeScript)('dsq-embed-scr', doc.body);
            if (window && window.DISQUS) window.DISQUS.reset({});

            try {
                delete window.DISQUS;
            } catch (error) {
                window.DISQUS = undefined;
            }
            var disqusThread = doc.getElementById('disqus_thread');
            if (disqusThread) {
                while (disqusThread.hasChildNodes()) {
                    disqusThread.removeChild(disqusThread.firstChild);
                }
            }
        }
    }, {
        key: 'getDisqusConfig',
        value: function getDisqusConfig(config) {
            return function () {
                this.page.identifier = config.identifier;
                this.page.url = config.url;
                this.page.title = config.title;
                this.callbacks.onNewComment = [config.onNewComment];
            };
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement('div', { id: 'disqus_thread' });
        }
    }]);

    return DiscussionEmbed;
}(_react2.default.Component);

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map